{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "5c96dbd7_089a9f5d",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1575067
      },
      "writtenOn": "2023-04-20T09:35:29Z",
      "side": 1,
      "message": "Hi Frank\nI rewrite ARGBToAR64Row_RVV \u0026 AR64ToARGBRow_RVV to avoid using segment load \u0026 store.",
      "revId": "6ce066c3f8e0a4fbc0d81f75910df861b3daca79",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "67d8da2b_00b21d08",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1115898
      },
      "writtenOn": "2023-04-20T16:49:12Z",
      "side": 1,
      "message": "ideally these would all be 15x faster but its these are not common formats so I wouldnt worry about it.\n\nAB30 is more common and much more difficult to convert so/from: 2:10:10:10\n\nIt may help to do performance testing with 640x360 to get a better measure of instruction efficiency when L1 hits",
      "revId": "6ce066c3f8e0a4fbc0d81f75910df861b3daca79",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "ce5da37c_cece520c",
        "filename": "source/row_rvv.cc",
        "patchSetId": 2
      },
      "lineNbr": 74,
      "author": {
        "id": 1115898
      },
      "writtenOn": "2023-04-20T16:49:12Z",
      "side": 1,
      "message": "nice... with m8 doing the shift makes more sense.\nI had been thinking __riscv_vlseg2e8_v_u8m1 which loads 2 registers and __riscv_vse8_v_u8m1 to store the 2nd register. \nsomething like this:\n__riscv_vlseg2e8_v_u8m1(\u0026v_lo, \u0026v_hi, src_ar64, vl);\n __riscv_vse8_v_u8m1(dst_argb, v_hi, vl);",
      "range": {
        "startLine": 74,
        "startChar": 0,
        "endLine": 74,
        "endChar": 49
      },
      "revId": "6ce066c3f8e0a4fbc0d81f75910df861b3daca79",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "72ea9e7b_7d440c3c",
        "filename": "source/row_rvv.cc",
        "patchSetId": 2
      },
      "lineNbr": 74,
      "author": {
        "id": 1575067
      },
      "writtenOn": "2023-04-21T03:23:08Z",
      "side": 1,
      "message": "Both at below can implement the same function:\n1.  __riscv_vlseg2e8_v_u8m1 + __riscv_vse8_v_u8m1\n2. strided_load with only high byte + vector unit-strided store.\n\nIt depends on arch-design of segement_load \u0026 strided_load. Here, I think using simply unit-strided load is relatively general. Because unit-strided load/store are the simplest pattern in memory operations. I believe every RISC-V CPU vendor make this continuous load/store pattern as fast as possible. \nI am not really sure what\u0027s the performance for vld2 on ARM.",
      "parentUuid": "ce5da37c_cece520c",
      "range": {
        "startLine": 74,
        "startChar": 0,
        "endLine": 74,
        "endChar": 49
      },
      "revId": "6ce066c3f8e0a4fbc0d81f75910df861b3daca79",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "a37c7769_68f76b3c",
        "filename": "source/row_rvv.cc",
        "patchSetId": 2
      },
      "lineNbr": 90,
      "author": {
        "id": 1115898
      },
      "writtenOn": "2023-04-20T16:49:12Z",
      "side": 1,
      "message": "although you implemented this consistently with other functions, I question the channel order of AB64.\nin a little endian view where left values are low bits/bytes\nAB30 is bgra\nAB30 is rgba\nwhile\nAB64 is rgba\nAR64 is bgra\nI can\u0027t find this format supported elsewhere so I\u0027ll file a bug and swap the 2 formats in the future.",
      "revId": "6ce066c3f8e0a4fbc0d81f75910df861b3daca79",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "793ec9f7_5fb5302a",
        "filename": "source/row_rvv.cc",
        "patchSetId": 2
      },
      "lineNbr": 90,
      "author": {
        "id": 1115898
      },
      "writtenOn": "2023-04-20T19:36:52Z",
      "side": 1,
      "message": "Disregard... your code is right.  The code in row_common is misleading but AB64 is r,g,b,a as you have it, and that is consistent with AB30.  In the future there will be AR4H and AB4H as well, which are fp16 versions of this.  I\u0027m curious how you would implement those, so I might do the ARM version sooner than later, while you\u0027re able to provide some assistance.",
      "parentUuid": "a37c7769_68f76b3c",
      "revId": "6ce066c3f8e0a4fbc0d81f75910df861b3daca79",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ],
  "submitRequirementResults": [
    {
      "submitRequirement": {
        "name": "Code-Owners",
        "description": {
          "value": "User with the code owner override approved the change"
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "has:enabled_code-owners"
          }
        },
        "submittabilityExpression": {
          "expressionString": "has:approval_code-owners"
        },
        "overrideExpression": {
          "value": {
            "expressionString": "label:Owners-Override\u003d+1"
          }
        },
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"has:enabled_code-owners"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["has:enabled_code-owners"],"failingAtoms":[]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"has:approval_code-owners"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["has:approval_code-owners"],"failingAtoms":[]}
      },
      "overrideExpressionResult": {
        "value": {"expression":{"expressionString":"label:Owners-Override=+1"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["label:Owners-Override=+1"]}
      },
      "patchSetCommitId": "6ce066c3f8e0a4fbc0d81f75910df861b3daca79",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Code-Review",
        "description": {
          "value": "Submit requirement for the \u0027Code-Review\u0027 label"
        },
        "applicabilityExpression": {},
        "submittabilityExpression": {
          "expressionString": "label:Code-Review\u003dMAX,user\u003dnon_uploader -label:Code-Review\u003dMIN"
        },
        "overrideExpression": {
          "value": {
            "expressionString": "label:Bot-Commit\u003d+1 AND -label:Code-Review\u003dMIN"
          }
        },
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {},
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"label:Code-Review=MAX,user=non_uploader -label:Code-Review=MIN"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["label:Code-Review=MAX,user=non_uploader"],"failingAtoms":["label:Code-Review=MIN"]}
      },
      "overrideExpressionResult": {
        "value": {"expression":{"expressionString":"label:Bot-Commit=+1 AND -label:Code-Review=MIN"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["label:Bot-Commit=+1","label:Code-Review=MIN"]}
      },
      "patchSetCommitId": "6ce066c3f8e0a4fbc0d81f75910df861b3daca79",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Review-Enforcement",
        "description": {
          "value": "Two Google employees must approve the change. Uploading the change or voting positively on Code-Review count as approval."
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "is:review-enforced_gerrit"
          }
        },
        "submittabilityExpression": {
          "expressionString": "is:review-enforcement-satisfied_gerrit"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": false
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforced_gerrit"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["is:review-enforced_gerrit"],"failingAtoms":[]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforcement-satisfied_gerrit"},"status":"NOT_EVALUATED","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":[]}
      },
      "overrideExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforced_gerrit"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["is:review-enforcement-satisfied_gerrit"]}
      },
      "patchSetCommitId": "6ce066c3f8e0a4fbc0d81f75910df861b3daca79",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {
        "value": true
      }
    },
    {
      "submitRequirement": {
        "name": "Verified",
        "description": {
          "value": "Submit requirement for the \u0027Verified\u0027 label"
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "is:false"
          }
        },
        "submittabilityExpression": {
          "expressionString": "is:true"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:false"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["is:false"]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:true"},"status":"NOT_EVALUATED","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":[]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "6ce066c3f8e0a4fbc0d81f75910df861b3daca79",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    }
  ]
}