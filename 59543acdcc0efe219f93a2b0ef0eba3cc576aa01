{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "c8478a93_43481ae0",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1115898
      },
      "writtenOn": "2021-04-16T19:55:38Z",
      "side": 1,
      "message": "When I run perf on a range conversions (*2*ToAR*_Opt), these are the top functions:\n\nBefore with old code\n    28.89%  libyuv_test  liblibyuv_impl.so       [.] I422ToARGBRow_AVX2\n    25.99%  libyuv_test  liblibyuv_impl.so       [.] I422AlphaToARGBRow_AVX2\n     8.36%  libyuv_test  liblibyuv_impl.so       [.] I210AlphaToARGBRow_AVX2\n     4.88%  libyuv_test  liblibyuv_impl.so       [.] P210ToAR30Row_AVX2\n     4.35%  libyuv_test  liblibyuv_impl.so       [.] P210ToARGBRow_AVX2\n     4.10%  libyuv_test  liblibyuv_impl.so       [.] I210ToAR30Row_AVX2\n     3.55%  libyuv_test  liblibyuv_impl.so       [.] I210ToARGBRow_AVX2\n     2.40%  libyuv_test  liblibyuv_test.so       [.] testing::internal::EqHelper::Compare\u003c\u003e\n     2.29%  libyuv_test  liblibyuv_impl.so       [.] I422ToAR30Row_AVX2\n     1.88%  libyuv_test  liblibyuv_impl.so       [.] NV21ToARGBRow_AVX2\n     1.87%  libyuv_test  liblibyuv_impl.so       [.] NV12ToARGBRow_AVX2\n     1.42%  libyuv_test  liblibyuv_impl.so       [.] ARGBToARGB1555Row_SSE2\n     1.34%  libyuv_test  liblibyuv_impl.so       [.] I212ToAR30Row_AVX2\n     1.15%  libyuv_test  liblibyuv_impl.so       [.] I212ToARGBRow_AVX2\n     0.98%  libyuv_test  liblibyuv_impl.so       [.] RGB24ToARGBRow_SSSE3\n     0.89%  libyuv_test  liblibyuv_impl.so       [.] YUY2ToARGBRow_AVX2\n     0.78%  libyuv_test  liblibyuv_impl.so       [.] ARGBToARGB4444Row_SSE2\n     0.50%  libyuv_test  libgtest_no_google3.so  [.] testing::AssertionSuccess\n     0.29%  libyuv_test  liblibyuv_test.so       [.] 0x0000000000b09ff0\n     0.29%  libyuv_test  liblibyuv_test.so       [.] 0x0000000000b0a380\n     0.11%  libyuv_test  [unknown]               [k] 0xffffffff90c00ae7\n     0.08%  libyuv_test  libc-2.19.so            [.] memset\n     0.07%  libyuv_test  liblibyuv_impl.so       [.] I420AlphaToARGBMatrix\n     0.06%  libyuv_test  liblibyuv_impl.so       [.] I420ToARGBMatrix\n\nProfile now\n    29.04%  libyuv_test  liblibyuv_impl.so       [.] I422ToARGBRow_AVX2\n    26.02%  libyuv_test  liblibyuv_impl.so       [.] I422AlphaToARGBRow_AVX2\n     8.33%  libyuv_test  liblibyuv_impl.so       [.] I210AlphaToARGBRow_AVX2\n     4.88%  libyuv_test  liblibyuv_impl.so       [.] P210ToAR30Row_AVX2\n     4.32%  libyuv_test  liblibyuv_impl.so       [.] P210ToARGBRow_AVX2\n     4.08%  libyuv_test  liblibyuv_impl.so       [.] I210ToAR30Row_AVX2\n     3.56%  libyuv_test  liblibyuv_impl.so       [.] I210ToARGBRow_AVX2\n     2.48%  libyuv_test  liblibyuv_test.so       [.] testing::internal::EqHelper::Compare\u003c\u003e\n     2.31%  libyuv_test  liblibyuv_impl.so       [.] I422ToAR30Row_AVX2\n     1.87%  libyuv_test  liblibyuv_impl.so       [.] NV21ToARGBRow_AVX2\n     1.87%  libyuv_test  liblibyuv_impl.so       [.] NV12ToARGBRow_AVX2\n     1.36%  libyuv_test  liblibyuv_impl.so       [.] ARGBToARGB1555Row_SSE2\n     1.35%  libyuv_test  liblibyuv_impl.so       [.] I212ToAR30Row_AVX2\n     1.15%  libyuv_test  liblibyuv_impl.so       [.] I212ToARGBRow_AVX2\n     0.97%  libyuv_test  liblibyuv_impl.so       [.] RGB24ToARGBRow_SSSE3\n     0.89%  libyuv_test  liblibyuv_impl.so       [.] YUY2ToARGBRow_AVX2\n     0.76%  libyuv_test  liblibyuv_impl.so       [.] ARGBToARGB4444Row_SSE2\n     0.45%  libyuv_test  libgtest_no_google3.so  [.] testing::AssertionSuccess\n     0.31%  libyuv_test  liblibyuv_test.so       [.] 0x0000000000b09ff0\n     0.31%  libyuv_test  liblibyuv_test.so       [.] 0x0000000000b0a380\n     0.09%  libyuv_test  libc-2.19.so            [.] memset\n\nSpeed was\n82 tests from LibYUVConvertTest (24803 ms total)\nI420ToARGB1555_Opt (614 ms)\nI420ToARGB4444_Opt (463 ms)\nV210AlphaToARGB_Opt (373 ms)\nU210AlphaToARGB_Opt (373 ms)\nJ210AlphaToARGB_Opt (373 ms)\nI210AlphaToARGB_Opt (373 ms)\nH210AlphaToARGB_Opt (373 ms)\nF210AlphaToARGB_Opt (373 ms)\nI210ToAR30_Opt (358 ms)\nH210ToAR30_Opt (358 ms)\nU210ToAR30_Opt (357 ms)\nI012ToAR30_Opt (352 ms)\nP212ToAR30_Opt (329 ms)\nP210ToAR30_Opt (329 ms)\nP216ToAR30_Opt (327 ms)\nU210ToARGB_Opt (314 ms)\nI210ToARGB_Opt (314 ms)\nH210ToARGB_Opt (314 ms)\nP012ToAR30_Opt (313 ms)\nI420ToAR30_Opt (306 ms)\nI012ToARGB_Opt (305 ms)\nH420ToAR30_Opt (305 ms)\nP216ToARGB_Opt (302 ms)\nP210ToARGB_Opt (302 ms)\nP212ToARGB_Opt (301 ms)\nV422AlphaToARGB_ABGR_Opt (297 ms)\nH422AlphaToARGB_ABGR_Opt (297 ms)\nU422AlphaToARGB_ABGR_Opt (296 ms)\nJ422AlphaToARGB_ABGR_Opt (296 ms)\nF422AlphaToARGB_ABGR_Opt (296 ms)\nI422AlphaToARGB_ABGR_Opt (295 ms)\nH422AlphaToARGB_Opt (294 ms)\nV422AlphaToARGB_Opt (293 ms)\nU422AlphaToARGB_Opt (293 ms)\nJ422AlphaToARGB_Opt (293 ms)\nI422AlphaToARGB_Opt (293 ms)\nF422AlphaToARGB_Opt (293 ms)\nJ420AlphaToARGB_ABGR_Opt (291 ms)\nI420AlphaToARGB_ABGR_Opt (291 ms)\nF420AlphaToARGB_ABGR_Opt (291 ms)\nV420AlphaToARGB_ABGR_Opt (290 ms)\nU420AlphaToARGB_ABGR_Opt (290 ms)\nH420AlphaToARGB_ABGR_Opt (290 ms)\nI420AlphaToARGB_Opt (289 ms)\nV420AlphaToARGB_Opt (288 ms)\nU420AlphaToARGB_Opt (288 ms)\nJ420AlphaToARGB_Opt (288 ms)\nH420AlphaToARGB_Opt (288 ms)\nF420AlphaToARGB_Opt (288 ms)\nI420ToARGB_Opt (286 ms)\nI420ToARGB_ABGR_Opt (280 ms)\nV422ToARGB_ARGB_Opt (279 ms)\nU420ToARGB_ARGB_Opt (279 ms)\nJ420ToARGB_ARGB_Opt (279 ms)\nH420ToARGB_ARGB_Opt (279 ms)\nJ420ToARGB_Opt (278 ms)\nH420ToARGB_Opt (278 ms)\nV422ToARGB_Opt (277 ms)\nV420ToARGB_Opt (277 ms)\nU422ToARGB_Opt (277 ms)\nU422ToARGB_ARGB_Opt (277 ms)\nU420ToARGB_Opt (277 ms)\nJ422ToARGB_Opt (277 ms)\nJ422ToARGB_ARGB_Opt (277 ms)\nI422ToARGB_Opt (277 ms)\nI422ToARGB_ABGR_Opt (277 ms)\nH422ToARGB_Opt (277 ms)\nH422ToARGB_ARGB_Opt (277 ms)\nF420ToARGB_Opt (277 ms)\nI420ToARGB_RAW_Opt (275 ms)\nH420ToARGB_RAW_Opt (273 ms)\nP012ToARGB_Opt (270 ms)\nI422ToARGB_RGB565_Opt (269 ms)\nI420ToARGB_RGB565_Opt (268 ms)\nI420ToARGB_ARGB4444_Opt (268 ms)\nI420ToARGB_ARGB1555_Opt (268 ms)\nRGB24ToARGB_Opt (266 ms)\nNV21ToARGB_Opt (247 ms)\nJNV21ToARGB_Opt (247 ms)\nJNV12ToARGB_Opt (247 ms)\nNV12ToARGB_Opt (246 ms)\nYUY2ToARGB_Opt (240 ms)\n\nNow\n[\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d] 82 tests from 1 test suite ran. (24740 ms total)\nI420ToARGB1555_Opt (614 ms)\nI420ToARGB4444_Opt (463 ms)\nV210AlphaToARGB_Opt (369 ms)\nU210AlphaToARGB_Opt (369 ms)\nI210AlphaToARGB_Opt (369 ms)\nJ210AlphaToARGB_Opt (368 ms)\nH210AlphaToARGB_Opt (368 ms)\nF210AlphaToARGB_Opt (368 ms)\nH210ToAR30_Opt (357 ms)\nU210ToAR30_Opt (356 ms)\nI210ToAR30_Opt (356 ms)\nI012ToAR30_Opt (352 ms)\nP212ToAR30_Opt (330 ms)\nP210ToAR30_Opt (328 ms)\nP216ToAR30_Opt (327 ms)\nH210ToARGB_Opt (314 ms)\nU210ToARGB_Opt (313 ms)\nI210ToARGB_Opt (313 ms)\nP012ToAR30_Opt (311 ms)\nI420ToAR30_Opt (306 ms)\nI012ToARGB_Opt (304 ms)\nH420ToAR30_Opt (303 ms)\nP210ToARGB_Opt (299 ms)\nP216ToARGB_Opt (298 ms)\nP212ToARGB_Opt (298 ms)\nU422AlphaToARGB_ABGR_Opt (296 ms)\nJ422AlphaToARGB_ABGR_Opt (296 ms)\nF422AlphaToARGB_ABGR_Opt (296 ms)\nJ420AlphaToARGB_Opt (295 ms)\nI422AlphaToARGB_Opt (295 ms)\nV422AlphaToARGB_ABGR_Opt (294 ms)\nI422AlphaToARGB_ABGR_Opt (294 ms)\nH422AlphaToARGB_ABGR_Opt (294 ms)\nF422AlphaToARGB_Opt (294 ms)\nV422AlphaToARGB_Opt (293 ms)\nU422AlphaToARGB_Opt (293 ms)\nJ422AlphaToARGB_Opt (293 ms)\nH422AlphaToARGB_Opt (293 ms)\nV420AlphaToARGB_ABGR_Opt (291 ms)\nU420AlphaToARGB_ABGR_Opt (291 ms)\nJ420AlphaToARGB_ABGR_Opt (290 ms)\nI420AlphaToARGB_ABGR_Opt (290 ms)\nH420AlphaToARGB_ABGR_Opt (290 ms)\nF420AlphaToARGB_ABGR_Opt (290 ms)\nI420AlphaToARGB_Opt (288 ms)\nH420AlphaToARGB_Opt (288 ms)\nV420AlphaToARGB_Opt (287 ms)\nU420AlphaToARGB_Opt (287 ms)\nF420AlphaToARGB_Opt (287 ms)\nV422ToARGB_ARGB_Opt (280 ms)\nJ420ToARGB_ARGB_Opt (280 ms)\nI420ToARGB_Opt (280 ms)\nI420ToARGB_ABGR_Opt (280 ms)\nH420ToARGB_ARGB_Opt (280 ms)\nU420ToARGB_ARGB_Opt (279 ms)\nV422ToARGB_Opt (278 ms)\nV420ToARGB_Opt (278 ms)\nU422ToARGB_ARGB_Opt (278 ms)\nU420ToARGB_Opt (278 ms)\nJ422ToARGB_Opt (278 ms)\nJ420ToARGB_Opt (278 ms)\nH420ToARGB_Opt (278 ms)\nF420ToARGB_Opt (278 ms)\nU422ToARGB_Opt (277 ms)\nJ422ToARGB_ARGB_Opt (277 ms)\nI422ToARGB_Opt (277 ms)\nI422ToARGB_ABGR_Opt (277 ms)\nH422ToARGB_ARGB_Opt (277 ms)\nH422ToARGB_Opt (276 ms)\nI420ToARGB_RAW_Opt (274 ms)\nH420ToARGB_RAW_Opt (274 ms)\nP012ToARGB_Opt (269 ms)\nI420ToARGB_RGB565_Opt (269 ms)\nI420ToARGB_ARGB1555_Opt (269 ms)\nI422ToARGB_RGB565_Opt (268 ms)\nI420ToARGB_ARGB4444_Opt (268 ms)\nRGB24ToARGB_Opt (263 ms)\nNV21ToARGB_Opt (247 ms)\nJNV21ToARGB_Opt (247 ms)\nJNV12ToARGB_Opt (247 ms)\nNV12ToARGB_Opt (246 ms)\nYUY2ToARGB_Opt (240 ms)\n",
      "revId": "59543acdcc0efe219f93a2b0ef0eba3cc576aa01",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "ff7a14a0_a05152cd",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1115898
      },
      "writtenOn": "2021-04-16T20:11:59Z",
      "side": 1,
      "message": "Looks great overall!  Thanks!\nWe can likely land this as is, since it is behind a flag.\n\nwindows and mips dont have this unlimited data feature.  A quick work around is to disable the assembly for those.  On windows with clangcl, the 64 bit uses row_gcc.cc so it works.  But 32 bit uses row_win.cc, and actual visual c uses row_win.cc for 64 bit using the intrinsics version.\nWe can disable SIMD for windows and mips for now in row.h and they will benefit from the new quality, but will be slow until optimized.\n\nThe next step is to enable the new code for unlimited, but still use the old clamped coefficients for comparability.  I had meant to have LIBYUV_UNLIMITED_CODE as a macro for the code, and it would work with either the old data or the new LIBYUV_UNLIMITED_DATA.\nWe can remove all the old code at that point.\n",
      "revId": "59543acdcc0efe219f93a2b0ef0eba3cc576aa01",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "04708f97_0778df3d",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1115898
      },
      "writtenOn": "2021-04-16T20:17:27Z",
      "side": 1,
      "message": "In future it would be great to have NV12ToRGB24 and RAW use a direct row function that can write 24 bit RGB.  We are very low on free registers, but it likely requires shufflers.",
      "revId": "59543acdcc0efe219f93a2b0ef0eba3cc576aa01",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "013203b3_5d16173f",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1115898
      },
      "writtenOn": "2021-04-16T20:27:10Z",
      "side": 1,
      "message": "Now with -DLIBYUV_UNLIMITED_DATA enabled:\n[\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d] 82 tests from 1 test suite ran. (26156 ms total)\nI420ToARGB1555_Opt (656 ms)\nI420ToARGB4444_Opt (519 ms)\nF210AlphaToARGB_Opt (450 ms)\nI210AlphaToARGB_Opt (380 ms)\nH210AlphaToARGB_Opt (379 ms)\nJ210AlphaToARGB_Opt (378 ms)\nU210AlphaToARGB_Opt (376 ms)\nV210AlphaToARGB_Opt (375 ms)\nI210ToAR30_Opt (355 ms)\nU210ToAR30_Opt (353 ms)\nH210ToAR30_Opt (353 ms)\nI012ToAR30_Opt (346 ms)\nI210ToARGB_Opt (336 ms)\nH210ToARGB_Opt (336 ms)\nU210ToARGB_Opt (335 ms)\nJNV21ToARGB_Opt (329 ms)\nI012ToARGB_Opt (326 ms)\nP212ToAR30_Opt (324 ms)\nP210ToAR30_Opt (324 ms)\nP216ToAR30_Opt (323 ms)\nI420ToAR30_Opt (316 ms)\nH420ToAR30_Opt (316 ms)\nJ420ToARGB_ARGB_Opt (315 ms)\nJ420AlphaToARGB_ABGR_Opt (312 ms)\nH422AlphaToARGB_ABGR_Opt (312 ms)\nH420AlphaToARGB_ABGR_Opt (312 ms)\nF422AlphaToARGB_ABGR_Opt (312 ms)\nJ422AlphaToARGB_ABGR_Opt (311 ms)\nI420AlphaToARGB_ABGR_Opt (311 ms)\nF420AlphaToARGB_ABGR_Opt (311 ms)\nV422AlphaToARGB_ABGR_Opt (310 ms)\nU422AlphaToARGB_Opt (310 ms)\nU422AlphaToARGB_ABGR_Opt (310 ms)\nI422AlphaToARGB_ABGR_Opt (310 ms)\nV422AlphaToARGB_Opt (309 ms)\nV420AlphaToARGB_ABGR_Opt (309 ms)\nU420AlphaToARGB_ABGR_Opt (309 ms)\nJ422AlphaToARGB_Opt (309 ms)\nI422AlphaToARGB_Opt (309 ms)\nH422AlphaToARGB_Opt (309 ms)\nF422AlphaToARGB_Opt (309 ms)\nP012ToAR30_Opt (307 ms)\nJ420AlphaToARGB_Opt (307 ms)\nI420AlphaToARGB_Opt (307 ms)\nV420AlphaToARGB_Opt (306 ms)\nU420AlphaToARGB_Opt (306 ms)\nH420AlphaToARGB_Opt (306 ms)\nF420AlphaToARGB_Opt (306 ms)\nV422ToARGB_ARGB_Opt (300 ms)\nP216ToARGB_Opt (300 ms)\nP212ToARGB_Opt (300 ms)\nP210ToARGB_Opt (300 ms)\nU420ToARGB_ARGB_Opt (299 ms)\nJ422ToARGB_ARGB_Opt (298 ms)\nI420ToARGB_ABGR_Opt (298 ms)\nU422ToARGB_Opt (297 ms)\nU422ToARGB_ARGB_Opt (297 ms)\nH422ToARGB_ARGB_Opt (297 ms)\nH420ToARGB_ARGB_Opt (297 ms)\nV422ToARGB_Opt (296 ms)\nJ420ToARGB_Opt (296 ms)\nH422ToARGB_Opt (296 ms)\nV420ToARGB_Opt (295 ms)\nJ422ToARGB_Opt (295 ms)\nI422ToARGB_Opt (295 ms)\nI422ToARGB_ABGR_Opt (295 ms)\nI420ToARGB_Opt (295 ms)\nI420ToARGB_ARGB4444_Opt (295 ms)\nF420ToARGB_Opt (295 ms)\nU420ToARGB_Opt (294 ms)\nH420ToARGB_Opt (294 ms)\nI420ToARGB_RAW_Opt (293 ms)\nH420ToARGB_RAW_Opt (291 ms)\nI420ToARGB_RGB565_Opt (287 ms)\nI420ToARGB_ARGB1555_Opt (287 ms)\nI422ToARGB_RGB565_Opt (285 ms)\nP012ToARGB_Opt (282 ms)\nJNV12ToARGB_Opt (280 ms)\nRGB24ToARGB_Opt (268 ms)\nNV21ToARGB_Opt (268 ms)\nNV12ToARGB_Opt (266 ms)\nYUY2ToARGB_Opt (250 ms)\n\nProfile\n    29.56%  libyuv_test  liblibyuv_impl.so       [.] I422ToARGBRow_AVX2\n    26.51%  libyuv_test  liblibyuv_impl.so       [.] I422AlphaToARGBRow_AVX2\n     8.10%  libyuv_test  liblibyuv_impl.so       [.] I210AlphaToARGBRow_AVX2\n     4.58%  libyuv_test  liblibyuv_impl.so       [.] P210ToAR30Row_AVX2\n     4.24%  libyuv_test  liblibyuv_impl.so       [.] P210ToARGBRow_AVX2\n     3.87%  libyuv_test  liblibyuv_impl.so       [.] I210ToAR30Row_AVX2\n     3.65%  libyuv_test  liblibyuv_impl.so       [.] I210ToARGBRow_AVX2\n     2.31%  libyuv_test  liblibyuv_test.so       [.] testing::internal::EqHelper::Compare\u003c\u003e\n     2.26%  libyuv_test  liblibyuv_impl.so       [.] I422ToAR30Row_AVX2\n     1.92%  libyuv_test  liblibyuv_impl.so       [.] NV21ToARGBRow_AVX2\n     1.91%  libyuv_test  liblibyuv_impl.so       [.] NV12ToARGBRow_AVX2\n     1.30%  libyuv_test  liblibyuv_impl.so       [.] ARGBToARGB1555Row_SSE2\n     1.26%  libyuv_test  liblibyuv_impl.so       [.] I212ToAR30Row_AVX2\n     1.17%  libyuv_test  liblibyuv_impl.so       [.] I212ToARGBRow_AVX2\n     0.93%  libyuv_test  liblibyuv_impl.so       [.] RGB24ToARGBRow_SSSE3\n     0.89%  libyuv_test  liblibyuv_impl.so       [.] YUY2ToARGBRow_AVX2\n     0.84%  libyuv_test  liblibyuv_impl.so       [.] ARGBToARGB4444Row_SSE2\n     0.45%  libyuv_test  libgtest_no_google3.so  [.] testing::AssertionSuccess\n     0.32%  libyuv_test  liblibyuv_test.so       [.] 0x0000000000b09ff0\n     0.28%  libyuv_test  liblibyuv_test.so       [.] 0x0000000000b0a380\n     0.17%  libyuv_test  [unknown]               [k] 0xffffffff90c00ae7\n     0.07%  libyuv_test  liblibyuv_impl.so       [.] I420ToARGBMatrix\n     0.06%  libyuv_test  liblibyuv_impl.so       [.] I420AlphaToARGBMatrix\n     0.06%  libyuv_test  liblibyuv_impl.so       [.] I422AlphaToARGBMatrix\n     0.06%  libyuv_test  libc-2.19.so            [.] memset\n",
      "revId": "59543acdcc0efe219f93a2b0ef0eba3cc576aa01",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "e2bb02a7_7a471419",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1115898
      },
      "writtenOn": "2021-04-16T20:33:44Z",
      "side": 1,
      "message": "Performance is slightly slower than old code, likely due to masking.\nWas \nNV12ToARGB_Opt (248 ms)\nNow\nNV12ToARGB_Opt (265 ms)\n\nThis is expected and acceptable in my opinion, for the improved accuracy on blue channel.\nPerformance improved on ARM, so there may be a way to optimize the AVX further?\n\n\n",
      "revId": "59543acdcc0efe219f93a2b0ef0eba3cc576aa01",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "08b0d8be_ff74f928",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1115898
      },
      "writtenOn": "2021-04-16T20:38:47Z",
      "side": 1,
      "message": "Color test looks good, but green channel has the most error on bt.2020?\n[ RUN      ] LibYUVColorTest.TestFullYUV\nhist\t      -1\t       0\t       1\nred\t  568320\t15632384\t  576512\ngreen\t  212963\t16350646\t  213607\nblue\t  444672\t15875840\t  456704\n[       OK ] LibYUVColorTest.TestFullYUV (601 ms)\n[ RUN      ] LibYUVColorTest.TestFullYUVJ\nhist\t      -1\t       0\t       1\nred\t 1329408\t14306304\t 1141504\ngreen\t 1991639\t12981998\t 1803579\nblue\t 1413120\t14024704\t 1339392\n[       OK ] LibYUVColorTest.TestFullYUVJ (557 ms)\n[ RUN      ] LibYUVColorTest.TestFullYUVH\nhist\t      -1\t       0\t       1\nred\t  876032\t15063552\t  837632\ngreen\t 2542624\t11665266\t 2569326\nblue\t  455424\t15859200\t  462592\n[       OK ] LibYUVColorTest.TestFullYUVH (557 ms)\n[ RUN      ] LibYUVColorTest.TestFullYUVF\nhist\t      -1\t       0\t       1\nred\t  903168\t15049472\t  824576\ngreen\t  407119\t16186415\t  183682\nblue\t  729600\t15387392\t  660224\n[       OK ] LibYUVColorTest.TestFullYUVF (529 ms)\n[ RUN      ] LibYUVColorTest.TestFullYUVU\nhist\t      -1\t       0\t       1\nred\t 1575936\t13507584\t 1693696\ngreen\t 2278894\t12168729\t 2329593\nblue\t  168448\t16390912\t  217856\n[       OK ] LibYUVColorTest.TestFullYUVU (555 ms)\n[ RUN      ] LibYUVColorTest.TestFullYUVV\nhist\t      -2\t      -1\t       0\t       1\t       2\nred\t       0\t 1627136\t13670144\t 1479936\t       0\ngreen\t  319285\t 3456836\t 9243059\t 3440771\t  317265\nblue\t       0\t 1561088\t14202112\t 1014016\t       0\n[       OK ] LibYUVColorTest.TestFullYUVV (527 ms)\n",
      "revId": "59543acdcc0efe219f93a2b0ef0eba3cc576aa01",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "d93fb9f4_ee824ea3",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1001562
      },
      "writtenOn": "2021-04-16T20:40:37Z",
      "side": 1,
      "message": "This is a lot of assembly code! Did you write all this by hand, or was some of this generated by a script? Either way, it\u0027s impressive.",
      "revId": "59543acdcc0efe219f93a2b0ef0eba3cc576aa01",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "459dff1b_7262d737",
        "filename": "include/libyuv/row.h",
        "patchSetId": 2
      },
      "lineNbr": 773,
      "author": {
        "id": 1115898
      },
      "writtenOn": "2021-04-16T20:11:59Z",
      "side": 1,
      "message": "Not ideal to have these, but your code looks reasonable.\nCan this be reduced to 16 bytes each.  Use vbroadcastf128 in avx2 to replicate it.",
      "revId": "59543acdcc0efe219f93a2b0ef0eba3cc576aa01",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ce329022_1c1ff1a8",
        "filename": "source/row_common.cc",
        "patchSetId": 2
      },
      "lineNbr": 1431,
      "author": {
        "id": 1001562
      },
      "writtenOn": "2021-04-16T20:40:37Z",
      "side": 1,
      "message": "Nit: Omit the parentheses around 0xff and 0 because 0xff ad 0 are single tokens.\n\nOnly the macro parameter \u0027C\u0027 and the entire expression need to be parenthesized.",
      "revId": "59543acdcc0efe219f93a2b0ef0eba3cc576aa01",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "419af9f2_60fb3c02",
        "filename": "source/row_common.cc",
        "patchSetId": 2
      },
      "lineNbr": 1431,
      "author": {
        "id": 1115898
      },
      "writtenOn": "2021-04-16T21:52:08Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "ce329022_1c1ff1a8",
      "revId": "59543acdcc0efe219f93a2b0ef0eba3cc576aa01",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "6930d7cc_239e7cfc",
        "filename": "source/row_gcc.cc",
        "patchSetId": 2
      },
      "lineNbr": 2171,
      "author": {
        "id": 1115898
      },
      "writtenOn": "2021-04-16T20:17:27Z",
      "side": 1,
      "message": "not important, but instead of alpha variants of all planar formats, consider READALPHA macros",
      "range": {
        "startLine": 2171,
        "startChar": 19,
        "endLine": 2171,
        "endChar": 66
      },
      "revId": "59543acdcc0efe219f93a2b0ef0eba3cc576aa01",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7ea1da21_6b7f0c65",
        "filename": "source/row_gcc.cc",
        "patchSetId": 2
      },
      "lineNbr": 2362,
      "author": {
        "id": 1115898
      },
      "writtenOn": "2021-04-16T19:55:38Z",
      "side": 1,
      "message": "consider doing the pand\u0027s directly with 256(%[yuvconstants]).",
      "revId": "59543acdcc0efe219f93a2b0ef0eba3cc576aa01",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b90173d1_d1e9c9af",
        "filename": "source/row_gcc.cc",
        "patchSetId": 2
      },
      "lineNbr": 2751,
      "author": {
        "id": 1001562
      },
      "writtenOn": "2021-04-16T20:40:37Z",
      "side": 1,
      "message": "Nit: Delete this blank line? There are many other occurrences in this file.",
      "revId": "59543acdcc0efe219f93a2b0ef0eba3cc576aa01",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}