{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "029476fe_3dcf992e",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1115898
      },
      "writtenOn": "2024-04-18T18:59:04Z",
      "side": 1,
      "message": "You can remove a cmp from the inner loop and use the subs width.\nCan be done as followup",
      "revId": "d388c00bda3baa66aae472683f4327749370b19b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "c6d72afa_1bcabf4b",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1115898
      },
      "writtenOn": "2024-04-18T19:40:43Z",
      "side": 1,
      "message": "George, needs a rebase merge... can you fix this up?\nSuggest looking to remove the cmp from the loop.\n\nMy normal method of looping for this sort of thing is\n\n// see if there is enough for the main loop.. if not, skip to remainder\nsub counter, amount\nblt 2f\n\nl:\n  subs sub counter, amount\n  jge 1b\n\n2:\nadds counter, amount\nor ands counter, amount-1\nbz 9f\n\nhandle remainder\n9: ret\n\nIn libyuv, remainders almost never happen... a typical camera frame is 1280x720\nmachine learning also tends to make nice round sizes like 512x512\n\nSo having remainder handling in the main sve functions will slightly hurt performance.\n\nAnother approach would be 2 functions.  The regular one, and an \u0027any\u0027 version.  But implement the \u0027any\u0027 with similar sve code, but using whilelt.\nThe non-any can be a single loop, guaranteed to be a multiple of vector length.\nIn the calling code, we\u0027d need to select the function to use based on being a multiple of vector length.  Slightly more complicated\n\nMostly the goal is to keep the sve simple and reasonably efficient for the common case, and not worry about performance for the remainder handling, which is normally done with row_any.cc",
      "revId": "d388c00bda3baa66aae472683f4327749370b19b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "dcaf835b_8df20b06",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1571352
      },
      "writtenOn": "2024-04-19T12:38:45Z",
      "side": 1,
      "message": "Agree with the goal of keeping the common resolution cases fast. I\u0027ve been benchmarking my code assuming a width of 720 but can switch to 1280 for future benchmarking.\n\nJust out of interest I tried avoiding the WHILELT entirely and having an \"any\" kernel but I couldn\u0027t observe any performance delta. It would make sense to try and avoid the predicated tail more aggressively if WHILELT and similar instructions were really expensive, but even on little cores they\u0027re pretty much fine as long as you\u0027re not running them in a tight loop like we have in some libyuv kernels.",
      "parentUuid": "c6d72afa_1bcabf4b",
      "revId": "d388c00bda3baa66aae472683f4327749370b19b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b3efb62c_b3cb2d3a",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1571352
      },
      "writtenOn": "2024-04-19T12:39:42Z",
      "side": 1,
      "message": "I think any merge conflict will just be because https://chromium-review.googlesource.com/c/libyuv/libyuv/+/5444424 isn\u0027t submitted yet. Should be fine after that?",
      "parentUuid": "dcaf835b_8df20b06",
      "revId": "d388c00bda3baa66aae472683f4327749370b19b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9f6f1fbc_f870dabd",
        "filename": "source/row_sve.cc",
        "patchSetId": 1
      },
      "lineNbr": 187,
      "author": {
        "id": 1115898
      },
      "writtenOn": "2024-04-18T18:59:04Z",
      "side": 1,
      "message": "consider removing cmp.  use subs on width\nThen sub or whilelt before the loop",
      "revId": "d388c00bda3baa66aae472683f4327749370b19b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "2163ca58_ef32fc90",
        "filename": "source/row_sve.cc",
        "patchSetId": 1
      },
      "lineNbr": 187,
      "author": {
        "id": 1571352
      },
      "writtenOn": "2024-04-19T12:34:29Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "9f6f1fbc_f870dabd",
      "revId": "d388c00bda3baa66aae472683f4327749370b19b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}