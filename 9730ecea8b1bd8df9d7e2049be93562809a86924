{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "eea6939f_23b8a2be",
        "filename": "source/row_sve.cc",
        "patchSetId": 4
      },
      "lineNbr": 1181,
      "author": {
        "id": 1115898
      },
      "writtenOn": "2024-07-06T22:51:38Z",
      "side": 1,
      "message": "This seems wrong?  Can it be generated with something like index?",
      "revId": "9730ecea8b1bd8df9d7e2049be93562809a86924",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "bea2b144_21167d86",
        "filename": "source/row_sve.cc",
        "patchSetId": 4
      },
      "lineNbr": 1181,
      "author": {
        "id": 1571352
      },
      "writtenOn": "2024-07-08T10:09:04Z",
      "side": 1,
      "message": "There is no straightforward way of generating indices with non-power-of-two element spacing. The only way I can think of to calculate this would be something like:\n\n    (index(0, 1) / 3) + (index(254, -1) % 3)\n    \nBut that would be a lot of instructions including divisions which tend to be expensive.\n\nJustin also suggested generating these tables procedurally here: https://chromium-review.googlesource.com/c/libyuv/libyuv/+/5631544/1..4/source/row_sve.cc#b1297\n\nI don\u0027t have a strong preference, let me know which you would prefer?",
      "parentUuid": "eea6939f_23b8a2be",
      "revId": "9730ecea8b1bd8df9d7e2049be93562809a86924",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "8bf94589_5e02ac85",
        "filename": "source/row_sve.cc",
        "patchSetId": 4
      },
      "lineNbr": 1181,
      "author": {
        "id": 1115898
      },
      "writtenOn": "2024-07-08T15:52:39Z",
      "side": 1,
      "message": "Will the code/table work when vl is longer than 256?",
      "parentUuid": "bea2b144_21167d86",
      "revId": "9730ecea8b1bd8df9d7e2049be93562809a86924",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "238a3961_3dcd5a19",
        "filename": "source/row_sve.cc",
        "patchSetId": 4
      },
      "lineNbr": 1181,
      "author": {
        "id": 1571352
      },
      "writtenOn": "2024-07-08T16:04:39Z",
      "side": 1,
      "message": "Should work fine. I\u0027ve tested the current table approach on all valid SVE vector lengths (128, 256, 512, 1024, 2048)-bits.\n\nVL\u003d2048 bits gives the 255th byte as the last byte in each vector, however since we need a multiple of three we only need to store up to 254 in the table.",
      "parentUuid": "8bf94589_5e02ac85",
      "revId": "9730ecea8b1bd8df9d7e2049be93562809a86924",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}