{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "2cd5d720_378b6bc3",
        "filename": "source/row_rvv.cc",
        "patchSetId": 3
      },
      "lineNbr": 33,
      "author": {
        "id": 1115898
      },
      "writtenOn": "2023-04-13T19:01:10Z",
      "side": 1,
      "message": "At some point the compiler is likely to complain that size_t has a different sign and size than int width.  But we can ignore that for now.  Have you tried compiling as RV32 - 32 bit pointers?  is size_t 32 bit in that mode?",
      "revId": "15e59e9fae219fe1408b5ddfa8c17670fbd56281",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "aca98929_7354dade",
        "filename": "source/row_rvv.cc",
        "patchSetId": 3
      },
      "lineNbr": 33,
      "author": {
        "id": 1573667
      },
      "writtenOn": "2023-04-14T04:00:53Z",
      "side": 1,
      "message": "Yes, size_t(unsigned int) is 32 bits in RV32 mode.\nI\u0027ll replace this with `size_t avl \u003d (size_t)width;` in the following CL.\nThanks!",
      "parentUuid": "2cd5d720_378b6bc3",
      "revId": "15e59e9fae219fe1408b5ddfa8c17670fbd56281",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "8ac2bec5_a5997ae8",
        "filename": "source/row_rvv.cc",
        "patchSetId": 3
      },
      "lineNbr": 40,
      "author": {
        "id": 1115898
      },
      "writtenOn": "2023-04-13T19:01:10Z",
      "side": 1,
      "message": "Interesting.  I was thinking the redundent vsetvl was unfortunate, and I\u0027ve wondered if it is expensive or relatively free.\nI\u0027ve seen tutorials that say the vsetvl is effectively the upper 32 bits of a 64 bit instruction and in the future there may be a 64 bit instruction encoding that includes the vsetvl in every instruction.\nIf thats the nature of the instruction, I\u0027d expect the vsetvl is very fast, and not worth avoiding.\nBut if there is a cost, theres an argument for a more classic approach of looping while the width is vlen, and then a remainder\nsomething like this:\n\n  size_t vl \u003d __riscv_vsetvl_e8m2(width);\n  vuint8m2_t v_a \u003d __riscv_vmv_v_x_u8m2(255u, vl);\n  while (width \u003e\u003d vl) {\n    vuint8m2_t v_b, v_g, v_r;\n    __riscv_vlseg3e8_v_u8m2(\u0026v_r, \u0026v_g, \u0026v_b, src_raw, vl);\n    __riscv_vsseg4e8_v_u8m2(dst_argb, v_b, v_g, v_r, v_a, vl);\n    width -\u003d vl;\n    src_raw +\u003d (3 * vl);\n    dst_argb +\u003d (4 * vl);\n  }\n  if (width \u003e 0)\n    vuint8m2_t v_b, v_g, v_r;\n    vl \u003d __riscv_vsetvl_e8m2(width);\n    __riscv_vlseg3e8_v_u8m2(\u0026v_r, \u0026v_g, \u0026v_b, src_raw, vl);\n    __riscv_vsseg4e8_v_u8m2(dst_argb, v_b, v_g, v_r, v_a, vl);\n  }\n\nBut your new code looks good.  Any cost the the __riscv_vsetvl_e8m2 is somewhat hidden by the looping branch",
      "revId": "15e59e9fae219fe1408b5ddfa8c17670fbd56281",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3e0f6e4e_b1f179b5",
        "filename": "source/row_rvv.cc",
        "patchSetId": 3
      },
      "lineNbr": 40,
      "author": {
        "id": 1575067
      },
      "writtenOn": "2023-04-14T05:08:43Z",
      "side": 1,
      "message": "\u003e Interesting.  I was thinking the redundent vsetvl was unfortunate, and I\u0027ve wondered if it is expensive or relatively free.\n\n\u003d\u003e This is relatively free. \n\n\u003e I\u0027ve seen tutorials that say the vsetvl is effectively the upper 32 bits of a 64 bit instruction and in the future there may be a 64 bit instruction encoding that includes the vsetvl in every instruction.\n\n\u003d\u003e can you share with me about this?\n\n\u003e But if there is a cost, theres an argument for a more classic approach of looping while the width is vlen, and then a remainder\n\u003e something like this:\n\u003e \n\u003e   size_t vl \u003d __riscv_vsetvl_e8m2(width);\n\u003e   vuint8m2_t v_a \u003d __riscv_vmv_v_x_u8m2(255u, vl);\n\u003e   while (width \u003e\u003d vl) {\n\u003e     vuint8m2_t v_b, v_g, v_r;\n\u003e     __riscv_vlseg3e8_v_u8m2(\u0026v_r, \u0026v_g, \u0026v_b, src_raw, vl);\n\u003e     __riscv_vsseg4e8_v_u8m2(dst_argb, v_b, v_g, v_r, v_a, vl);\n\u003e     width -\u003d vl;\n\u003e     src_raw +\u003d (3 * vl);\n\u003e     dst_argb +\u003d (4 * vl);\n\u003e   }\n\u003e   if (width \u003e 0)\n\u003e     vuint8m2_t v_b, v_g, v_r;\n\u003e     vl \u003d __riscv_vsetvl_e8m2(width);\n\u003e     __riscv_vlseg3e8_v_u8m2(\u0026v_r, \u0026v_g, \u0026v_b, src_raw, vl);\n\u003e     __riscv_vsseg4e8_v_u8m2(dst_argb, v_b, v_g, v_r, v_a, vl);\n\u003e   }\n\n\u003d\u003e I don\u0027t suggset dividing the code as above althought it can get extra benefits. Because this style seems violate the philosophy of vector. \n\n\u003e But your new code looks good.  Any cost the the __riscv_vsetvl_e8m2 is somewhat hidden by the looping branch\n\n\u003d\u003e For here, I originally just want to avoid redundant vsetvl() at first time running the loop. I didn\u0027t notice the benefit. However, I think about the pattern here again. It seems that putting vsetvl() at first or at last are the same.\nIf we put vsetvl() at fisrt of while-block{}, we\u0027ll do a redundant vsetvl(). \nIf we put vsetvl() at last of while-block{}, we\u0027ll do a useless vsetvl(0) at last time. Both of them have one redundant vsetvl()\n\nCould you provide some detail about \"somewhat hidden by the looping branch\"? Because Risc-v doesn\u0027t have delay slot, I am not sure do you mention about delay slot.",
      "parentUuid": "8ac2bec5_a5997ae8",
      "revId": "15e59e9fae219fe1408b5ddfa8c17670fbd56281",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8cd1a5d7_8ad0cc28",
        "filename": "source/row_rvv.cc",
        "patchSetId": 3
      },
      "lineNbr": 40,
      "author": {
        "id": 1573667
      },
      "writtenOn": "2023-04-14T06:11:28Z",
      "side": 1,
      "message": "\u0027\u0027\u0027... and in the future there may be a 64 bit instruction encoding that includes the vsetvl in every instruction.\u0027\u0027\u0027\n\u003d\u003e Does this refers to \"It is anticipated that a future extended 64-bit instruction encoding would allow these fields to be specified statically in the instruction encoding.\" mentioned here https://github.com/riscv/riscv-v-spec/blob/master/v-spec.adoc#34-vector-type-register-vtype ?\n\nRegarding putting the vsetvl at the front or the last, I prefer to put it at the front in general. Due to the tail/mask policy of the 1st instruction inside the loop and the default (vsetvl) tail/mask policy difference. \n\nIf those are different then the compiler should add a vsetvl with proper tail/mask policy for it, then the last vsetvl will be redundant. (Though cases here should be fine.)",
      "parentUuid": "3e0f6e4e_b1f179b5",
      "revId": "15e59e9fae219fe1408b5ddfa8c17670fbd56281",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "fe3c8012_ff052bcc",
        "filename": "source/row_rvv.cc",
        "patchSetId": 3
      },
      "lineNbr": 40,
      "author": {
        "id": 1115898
      },
      "writtenOn": "2023-04-14T16:13:23Z",
      "side": 1,
      "message": "If vsetvl is slow, having it at the top of the loop, immediately followed by an rvv instruction that needs it, will delay that instruction, and can\u0027t be co-issued.\nMy understanding is x280 can execute 2 instructions per cycle, but they would need to be instructions that dont depend on each other.\nBy moving it to the bottom of the loop, the first instruction of the loop can immediately start on the first iteration.  e.g. the rgb24 starts with 3 instructions\n  size_t vl \u003d __riscv_vsetvl_e8m2(width);\n  vuint8m2_t v_a \u003d __riscv_vmv_v_x_u8m2(255u, vl);\n  do {\n    vuint8m2_t v_b, v_g, v_r;\n    __riscv_vlseg3e8_v_u8m2(\u0026v_b, \u0026v_g, \u0026v_r, src_rgb24, vl);\n\nvsetvl will issue in the first cycle\n__riscv_vmv_v_x_u8m2 has to wait for vsetvl but can issue in the 2nd cycle\n__riscv_vlseg3e8_v_u8m2 can also co-issue in the 2nd cycle\n\nIf the vsetvl were at the top of the loop, it would have delayed the load.\n\nAt the bottom of the loop vsetvl will be followed by the branch to loop.  the branch for the loop can co-issue with the vsetvl\n\nWorst case if vsetvl is very slow, the second vsetvl only impacts the next function.\n\nFor this particular function another option is move\n  vuint8m2_t v_a \u003d __riscv_vmv_v_x_u8m2(255u, vl);\ninside the loop, if that can be co-issued for free.\nThen there is only a single vsetvl at the top of the loop.\n\nHere is what the compiler generated:\n\nRGB24ToARGBRow_RVV:                 \n\tvsetvli\ta3, a2, e8, m2, ta, ma\n\tvmv.v.i\tv14, -1\n.LBB5_1:                             \n\tvlseg3e8.v\tv8, (a0)\n\tvsseg4e8.v\tv8, (a1)\n\tsubw\ta2, a2, a3\n\tslli\ta4, a3, 1\n\tadd\ta0, a0, a3\n\tadd\ta0, a0, a4\n\tslli\ta3, a3, 2\n\tadd\ta1, a1, a3\n\tvsetvli\ta3, a2, e8, m2, ta, ma\n\tbgtz\ta2, .LBB5_1\n\nthe vsetvli wont hurt performance too much where it is.  In assembly I might move it up a few lines.\noh there is a way you can remove it, but you wont like it\n\n\nRGB24ToARGBRow_RVV:                 \n\tvsetvli\ta3, a2, e8, m2, ta, ma\n\tvmv.v.i\tv14, -1\n\tslli\ta4, a3, 1   // vl * 2\n\tslli\ta5, a3, 2   // vl * 4\n\tadd\ta4, a3, a4  // vl * 3\n\n.LBB5_1:                             \n\tvlseg3e8.v\tv8, (a0)\n\tvsseg4e8.v\tv8, (a1)\n\tsubw\ta2, a2, a3\n\tadd\ta0, a0, a4\n\tbgtz\ta2, .LBB5_1\n\nYou could provide 2 functions:\nRGB24ToARGBRow_Any_RVV that has vsetvli inside the loop\nRGB24ToARGBRow_RVV that has vsetvli outside the loop\n\nBy far the most common case for libyuv is images coming from a camera with a nice sized resolution, such as 1280x720.  For simple functions like this, row coalesce will convert that into a single call with 1280*720 x 1, so 921600x1\nSo width is almost always a multiple of 64",
      "parentUuid": "3e0f6e4e_b1f179b5",
      "revId": "15e59e9fae219fe1408b5ddfa8c17670fbd56281",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "17e5fc49_78ae28d0",
        "filename": "source/row_rvv.cc",
        "patchSetId": 3
      },
      "lineNbr": 40,
      "author": {
        "id": 1575067
      },
      "writtenOn": "2023-04-17T08:33:07Z",
      "side": 1,
      "message": "I\u0027ll investigate the suggestion of supporting both RGB24ToARGBRow_Any_RVV \u0026 RGB24ToARGBRow_RVV with some experiments.",
      "parentUuid": "fe3c8012_ff052bcc",
      "revId": "15e59e9fae219fe1408b5ddfa8c17670fbd56281",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ],
  "submitRequirementResults": [
    {
      "submitRequirement": {
        "name": "Code-Owners",
        "description": {
          "value": "User with the code owner override approved the change"
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "has:enabled_code-owners"
          }
        },
        "submittabilityExpression": {
          "expressionString": "has:approval_code-owners"
        },
        "overrideExpression": {
          "value": {
            "expressionString": "label:Owners-Override\u003d+1"
          }
        },
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"has:enabled_code-owners"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["has:enabled_code-owners"],"failingAtoms":[]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"has:approval_code-owners"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["has:approval_code-owners"],"failingAtoms":[]}
      },
      "overrideExpressionResult": {
        "value": {"expression":{"expressionString":"label:Owners-Override=+1"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["label:Owners-Override=+1"]}
      },
      "patchSetCommitId": "15e59e9fae219fe1408b5ddfa8c17670fbd56281",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Code-Review",
        "description": {
          "value": "Submit requirement for the \u0027Code-Review\u0027 label"
        },
        "applicabilityExpression": {},
        "submittabilityExpression": {
          "expressionString": "label:Code-Review\u003dMAX,user\u003dnon_uploader -label:Code-Review\u003dMIN"
        },
        "overrideExpression": {
          "value": {
            "expressionString": "label:Bot-Commit\u003d+1 AND -label:Code-Review\u003dMIN"
          }
        },
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {},
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"label:Code-Review=MAX,user=non_uploader -label:Code-Review=MIN"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["label:Code-Review=MAX,user=non_uploader"],"failingAtoms":["label:Code-Review=MIN"]}
      },
      "overrideExpressionResult": {
        "value": {"expression":{"expressionString":"label:Bot-Commit=+1 AND -label:Code-Review=MIN"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["label:Bot-Commit=+1","label:Code-Review=MIN"]}
      },
      "patchSetCommitId": "15e59e9fae219fe1408b5ddfa8c17670fbd56281",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Review-Enforcement",
        "description": {
          "value": "Two Google employees must approve the change. Uploading the change or voting positively on Code-Review count as approval."
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "is:review-enforced_gerrit"
          }
        },
        "submittabilityExpression": {
          "expressionString": "is:review-enforcement-satisfied_gerrit"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": false
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforced_gerrit"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["is:review-enforced_gerrit"],"failingAtoms":[]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforcement-satisfied_gerrit"},"status":"NOT_EVALUATED","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":[]}
      },
      "overrideExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforced_gerrit"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["is:review-enforcement-satisfied_gerrit"]}
      },
      "patchSetCommitId": "15e59e9fae219fe1408b5ddfa8c17670fbd56281",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {
        "value": true
      }
    },
    {
      "submitRequirement": {
        "name": "Verified",
        "description": {
          "value": "Submit requirement for the \u0027Verified\u0027 label"
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "is:false"
          }
        },
        "submittabilityExpression": {
          "expressionString": "is:true"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:false"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["is:false"]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:true"},"status":"NOT_EVALUATED","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":[]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "15e59e9fae219fe1408b5ddfa8c17670fbd56281",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    }
  ]
}