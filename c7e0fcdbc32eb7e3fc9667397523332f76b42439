{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "0810aac5_af173c3c",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1115898
      },
      "writtenOn": "2024-05-17T16:25:16Z",
      "side": 1,
      "message": "The change itself is okay.  It has the drawback of not allowing ISAs to be selectively enabled/disabled.  e.g. if there is a way in qemu to disable neon, it might be nice to use that to test sve, but this change will disable all isa\u0027s that depend on a lower isa.\n\nYour description might be good to preserve as either a comment or a document.\nMaybe cpu features needs its own document?\n\nIts worth noting we use the i8mm cpuid for dotproducts.\nIt seems like an odd cpu choice, that if a vendor decided to not include the actual vmmla instruction, they technically can\u0027t support the dotproduct associated with that cpuid.\nApple M1 supports dot product but not i8mm.  I havent poked at it to see if it supports vsudot\n\nlibyuv has pretty simple simd requirements, and historically arm was just neon, or not.  But it is becoming interesting, where we can have multiple implementations of the same row function.\nWe have the ability to test with cpu features turned off in 3 ways\n1. compile time disable cpus.  We\u0027ll probably want fine grained compile time flags, to allow dot product and sve to be disabled, but keep neon, for use cases on specific cpus, to work around bugs, for testing or for enabling builds on compilers that dont support certain ISAs.\n2. unittests can be run with command line flags to disable sve etc, mainly to allow benchmarking with different instructions.  They can also be disabled with environment variables\n3. runtime can set the cpu id directly, allowing isa to be disabled.",
      "revId": "c7e0fcdbc32eb7e3fc9667397523332f76b42439",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "949f7ae7_17f3aaeb",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1571352
      },
      "writtenOn": "2024-05-20T12:41:34Z",
      "side": 1,
      "message": "I agree a CPU features document could be useful, I will draft something for the AArch64 extensions.\n\nIt isn\u0027t reasonable to try and test SVE without Neon since SVE kernels can and do use Neon instructions especially for tail loops or reductions.\n\nAgree with the CPU features toggles, I don\u0027t think there\u0027s anything for me to do there?",
      "parentUuid": "0810aac5_af173c3c",
      "revId": "c7e0fcdbc32eb7e3fc9667397523332f76b42439",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "0843dfe4_67a6ceec",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1115898
      },
      "writtenOn": "2024-05-21T07:21:41Z",
      "side": 1,
      "message": "with ssve I understand mixing neon and sve wont work.\nbut mainly its for testing/benchmarking that it can be interesting to disable instruction sets selectively",
      "parentUuid": "949f7ae7_17f3aaeb",
      "revId": "c7e0fcdbc32eb7e3fc9667397523332f76b42439",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "0289576d_f5bf3375",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1571352
      },
      "writtenOn": "2024-05-21T16:18:15Z",
      "side": 1,
      "message": "Streaming-SVE needs to be toggled on explicitly with SMSTART/SMSTOP instructions so there is no chance of accidentally hitting this in the SVE code today, we\u0027ll need separate code paths for most of the SME/SSVE code anyway since the instruction sets are slightly different so it will end up as a separate library like :libyuv_sve vs :libyuv_neon today, although they can probably share some macros.\n\nCPU features document added in https://chromium-review.googlesource.com/c/libyuv/libyuv/+/5554431",
      "parentUuid": "0843dfe4_67a6ceec",
      "revId": "c7e0fcdbc32eb7e3fc9667397523332f76b42439",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ],
  "submitRequirementResults": [
    {
      "submitRequirement": {
        "name": "Code-Review",
        "description": {
          "value": "Submit requirement for the \u0027Code-Review\u0027 label"
        },
        "applicabilityExpression": {},
        "submittabilityExpression": {
          "expressionString": "label:Code-Review\u003dMAX,user\u003dnon_uploader -label:Code-Review\u003dMIN"
        },
        "overrideExpression": {
          "value": {
            "expressionString": "label:Bot-Commit\u003d+1 AND -label:Code-Review\u003dMIN"
          }
        },
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {},
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"label:Code-Review=MAX,user=non_uploader -label:Code-Review=MIN"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["label:Code-Review=MAX,user=non_uploader"],"failingAtoms":["label:Code-Review=MIN"]}
      },
      "overrideExpressionResult": {
        "value": {"expression":{"expressionString":"label:Bot-Commit=+1 AND -label:Code-Review=MIN"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["label:Bot-Commit=+1","label:Code-Review=MIN"]}
      },
      "patchSetCommitId": "c7e0fcdbc32eb7e3fc9667397523332f76b42439",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Review-Enforcement",
        "description": {
          "value": "Two Google employees must approve the change. Uploading the change or voting positively on Code-Review count as approval."
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "is:review-enforced_gerrit"
          }
        },
        "submittabilityExpression": {
          "expressionString": "is:review-enforcement-satisfied_gerrit"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": false
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforced_gerrit"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["is:review-enforced_gerrit"],"failingAtoms":[]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforcement-satisfied_gerrit"},"status":"NOT_EVALUATED","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":[]}
      },
      "overrideExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforced_gerrit"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["is:review-enforcement-satisfied_gerrit"]}
      },
      "patchSetCommitId": "c7e0fcdbc32eb7e3fc9667397523332f76b42439",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {
        "value": true
      }
    },
    {
      "submitRequirement": {
        "name": "Verified",
        "description": {
          "value": "Submit requirement for the \u0027Verified\u0027 label"
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "is:false"
          }
        },
        "submittabilityExpression": {
          "expressionString": "is:true"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:false"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["is:false"]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:true"},"status":"NOT_EVALUATED","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":[]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "c7e0fcdbc32eb7e3fc9667397523332f76b42439",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    }
  ]
}