{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "b8808592_75ace515",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1115898
      },
      "writtenOn": "2024-04-27T16:43:06Z",
      "side": 1,
      "message": "looks like a win but could remove the other cmp",
      "revId": "c1455927565395853ed180d5840f00505176dfc7",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "38b3a586_df1d2049",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1571352
      },
      "writtenOn": "2024-04-29T13:55:56Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "b8808592_75ace515",
      "revId": "c1455927565395853ed180d5840f00505176dfc7",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ea549d81_1779c04e",
        "filename": "source/row_sve.cc",
        "patchSetId": 1
      },
      "lineNbr": 75,
      "author": {
        "id": 1115898
      },
      "writtenOn": "2024-04-27T16:43:06Z",
      "side": 1,
      "message": "should RA use the same? \nuqshrnt     z18.b, z19.h, #6\n\nIf you zip the results together BG and RA to get BGRA, the store becomes STP which may be at least break even, but faster on A510\n\nOn row_neon64 I use macros to allow ST2 to be avoided with compile time code if you want to try both methods.",
      "revId": "c1455927565395853ed180d5840f00505176dfc7",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0fce5cb7_044fec3a",
        "filename": "source/row_sve.cc",
        "patchSetId": 1
      },
      "lineNbr": 75,
      "author": {
        "id": 1571352
      },
      "writtenOn": "2024-04-29T13:55:56Z",
      "side": 1,
      "message": "UQSHRNT has worse performance than TRN1 so the existing approach is nicer if we can control the format of the alpha component to be 8bit rather than needing to widen it to 16bit.\n\nI think ST2H performs quite a bit better than ZIP1 + ST1B + ST1B on Cortex-A720 (there is no 2-reg ST1 or STP in SVE until SVE2.1) so we can\u0027t generally prefer the ZIP version. According to the Cortex-A510 software optimization guide ( https://developer.arm.com/documentation/PJDOC-466751330-536816/latest/ ) the performance of ST2H is fine unlike the Neon ones, so there should be no need to special case it?",
      "parentUuid": "ea549d81_1779c04e",
      "revId": "c1455927565395853ed180d5840f00505176dfc7",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "6a1c6bfe_86e73eb3",
        "filename": "source/row_sve.cc",
        "patchSetId": 1
      },
      "lineNbr": 75,
      "author": {
        "id": 1115898
      },
      "writtenOn": "2024-04-29T17:44:11Z",
      "side": 1,
      "message": "Doh!  No STP and ST3/ST4 are crazy slow, so overall ST2 is best, allowing 2 registers.\nUnlike Neon where ST2 is slower than STP or ST1 with 2 registers.\n\nAlthough this function is pretty good, this approach doesnt scale to the other RGB formats.  There are a number of supported RGB formats in libyuv.  See video_common.h\n  // 13 Primary RGB formats: 4 32 bpp, 2 24 bpp, 3 16 bpp, 1 10 bpc 2 64 bpp\n  FOURCC_ARGB \u003d FOURCC(\u0027A\u0027, \u0027R\u0027, \u0027G\u0027, \u0027B\u0027),\n  FOURCC_BGRA \u003d FOURCC(\u0027B\u0027, \u0027G\u0027, \u0027R\u0027, \u0027A\u0027),\n  FOURCC_ABGR \u003d FOURCC(\u0027A\u0027, \u0027B\u0027, \u0027G\u0027, \u0027R\u0027),\n  FOURCC_AR30 \u003d FOURCC(\u0027A\u0027, \u0027R\u0027, \u00273\u0027, \u00270\u0027),  // 10 bit per channel. 2101010.\n  FOURCC_AB30 \u003d FOURCC(\u0027A\u0027, \u0027B\u0027, \u00273\u0027, \u00270\u0027),  // ABGR version of 10 bit\n  FOURCC_AR64 \u003d FOURCC(\u0027A\u0027, \u0027R\u0027, \u00276\u0027, \u00274\u0027),  // 16 bit per channel.\n  FOURCC_AB64 \u003d FOURCC(\u0027A\u0027, \u0027B\u0027, \u00276\u0027, \u00274\u0027),  // ABGR version of 16 bit\n  FOURCC_24BG \u003d FOURCC(\u00272\u0027, \u00274\u0027, \u0027B\u0027, \u0027G\u0027),\n  FOURCC_RAW \u003d FOURCC(\u0027r\u0027, \u0027a\u0027, \u0027w\u0027, \u0027 \u0027),\n  FOURCC_RGBA \u003d FOURCC(\u0027R\u0027, \u0027G\u0027, \u0027B\u0027, \u0027A\u0027),\n  FOURCC_RGBP \u003d FOURCC(\u0027R\u0027, \u0027G\u0027, \u0027B\u0027, \u0027P\u0027),  // rgb565 LE.\n  FOURCC_RGBO \u003d FOURCC(\u0027R\u0027, \u0027G\u0027, \u0027B\u0027, \u0027O\u0027),  // argb1555 LE.\n  FOURCC_R444 \u003d FOURCC(\u0027R\u0027, \u00274\u0027, \u00274\u0027, \u00274\u0027),  // argb4444 LE.\n\nOf these the important formats are\nARGB\nABGR\nRGB (RAW)\nBGR (RGB24)\nAR30\n\nTo reorder channels, I think you\u0027ll need RGBToRGBA macros for each format, so it may be better to create store macros that include the ST2H\nThen you can weave the R,G,B in different orders or use ST3B if necessary.",
      "parentUuid": "0fce5cb7_044fec3a",
      "revId": "c1455927565395853ed180d5840f00505176dfc7",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "131da577_fac3fe5b",
        "filename": "source/row_sve.cc",
        "patchSetId": 1
      },
      "lineNbr": 92,
      "author": {
        "id": 1115898
      },
      "writtenOn": "2024-04-27T16:43:06Z",
      "side": 1,
      "message": "change to subs\nsubs      %w[width], %w[width], %w[vl]\nremove sub below.",
      "revId": "c1455927565395853ed180d5840f00505176dfc7",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "36cc0d59_e08168dc",
        "filename": "source/row_sve.cc",
        "patchSetId": 1
      },
      "lineNbr": 92,
      "author": {
        "id": 1571352
      },
      "writtenOn": "2024-04-29T13:55:56Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "131da577_fac3fe5b",
      "revId": "c1455927565395853ed180d5840f00505176dfc7",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "902b4385_567b544a",
        "filename": "source/row_sve.cc",
        "patchSetId": 1
      },
      "lineNbr": 102,
      "author": {
        "id": 1115898
      },
      "writtenOn": "2024-04-27T16:43:06Z",
      "side": 1,
      "message": "is st2h slow on A510?  on neon I would tend to zip the 2 vectors and use stp.\n\nThis BG, RA format wont lend itself to outputting 3 byte BGR, which needs st3b\nOn x86 the stores are complicated so I did a set of store macros similar to the read.  e.g.\n\n// Store 8 RGB24 values.\n#define STORERGB24                                                      \\\n  \"punpcklbw   %%xmm1,%%xmm0                                        \\n\" \\\n  \"punpcklbw   %%xmm2,%%xmm2                                        \\n\" \\\n  \"movdqa      %%xmm0,%%xmm1                                        \\n\" \\\n  \"punpcklwd   %%xmm2,%%xmm0                                        \\n\" \\\n  \"punpckhwd   %%xmm2,%%xmm1                                        \\n\" \\\n  \"pshufb      %%xmm5,%%xmm0                                        \\n\" \\\n  \"pshufb      %%xmm6,%%xmm1                                        \\n\" \\\n  \"palignr     $0xc,%%xmm0,%%xmm1                                   \\n\" \\\n  \"movq        %%xmm0,(%[dst_rgb24])                                \\n\" \\\n  \"movdqu      %%xmm1,0x8(%[dst_rgb24])                             \\n\" \\\n  \"lea         0x18(%[dst_rgb24]),%[dst_rgb24]                      \\n\"\n\nwith st3/4 its so easy on ARM I didnt bother, but with AR30 it would be worth it, and you might want to put the st2h in a macro that you can reuse and change in the future.",
      "range": {
        "startLine": 102,
        "startChar": 7,
        "endLine": 102,
        "endChar": 11
      },
      "revId": "c1455927565395853ed180d5840f00505176dfc7",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3ac25900_0c5f44df",
        "filename": "source/row_sve.cc",
        "patchSetId": 1
      },
      "lineNbr": 102,
      "author": {
        "id": 1571352
      },
      "writtenOn": "2024-04-29T13:55:56Z",
      "side": 1,
      "message": "ST2H is fine on A510, throughput of one every two cycles. Agree that we\u0027ll need a different approach for RGB24/RAW, I\u0027m not sure the best approach for that yet, will need to try a few different things.",
      "parentUuid": "902b4385_567b544a",
      "range": {
        "startLine": 102,
        "startChar": 7,
        "endLine": 102,
        "endChar": 11
      },
      "revId": "c1455927565395853ed180d5840f00505176dfc7",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "552ca7eb_3b413c34",
        "filename": "source/row_sve.cc",
        "patchSetId": 1
      },
      "lineNbr": 102,
      "author": {
        "id": 1115898
      },
      "writtenOn": "2024-04-29T17:44:11Z",
      "side": 1,
      "message": "Acknowledged",
      "parentUuid": "3ac25900_0c5f44df",
      "range": {
        "startLine": 102,
        "startChar": 7,
        "endLine": 102,
        "endChar": 11
      },
      "revId": "c1455927565395853ed180d5840f00505176dfc7",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b46b547c_221512a1",
        "filename": "source/row_sve.cc",
        "patchSetId": 1
      },
      "lineNbr": 104,
      "author": {
        "id": 1115898
      },
      "writtenOn": "2024-04-27T16:43:06Z",
      "side": 1,
      "message": "b.ge if you want the main loop to handle the last full vector.\ne.g width is 32 and vl is 16\nsub 16 from width.  width is 16.\ndo main loop once\nsub 16 from width.  width is 0.\nb.ge to do the 2nd loop\nsub 16 from width.  width is -16.\nfall out of main loop and check if there is a remainder\n\nadd 16 to width.  width is 0.  no remainder\nyou can use adds and take a branch for no remainder case",
      "revId": "c1455927565395853ed180d5840f00505176dfc7",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "c5b7f53b_722b1041",
        "filename": "source/row_sve.cc",
        "patchSetId": 1
      },
      "lineNbr": 104,
      "author": {
        "id": 1571352
      },
      "writtenOn": "2024-04-29T13:55:56Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "b46b547c_221512a1",
      "revId": "c1455927565395853ed180d5840f00505176dfc7",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7b573845_041410b4",
        "filename": "source/row_sve.cc",
        "patchSetId": 1
      },
      "lineNbr": 109,
      "author": {
        "id": 1115898
      },
      "writtenOn": "2024-04-27T16:43:06Z",
      "side": 1,
      "message": "its probably possible to compute this predicate earlier, if it has high latency.\nIt can be avoided with a branch around this code, if width is 0",
      "revId": "c1455927565395853ed180d5840f00505176dfc7",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9aa2c3ba_0fddb9a8",
        "filename": "source/row_sve.cc",
        "patchSetId": 1
      },
      "lineNbr": 109,
      "author": {
        "id": 1571352
      },
      "writtenOn": "2024-04-29T13:55:56Z",
      "side": 1,
      "message": "With the ADDS change this should be rarely executed so not going to worry about this?",
      "parentUuid": "7b573845_041410b4",
      "revId": "c1455927565395853ed180d5840f00505176dfc7",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "37770855_5c7a26be",
        "filename": "source/row_sve.cc",
        "patchSetId": 1
      },
      "lineNbr": 109,
      "author": {
        "id": 1115898
      },
      "writtenOn": "2024-04-29T17:44:11Z",
      "side": 1,
      "message": "Acknowledged",
      "parentUuid": "9aa2c3ba_0fddb9a8",
      "revId": "c1455927565395853ed180d5840f00505176dfc7",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}