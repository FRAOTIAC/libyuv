{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "47d777e2_385a161e",
        "filename": "docs/getting_started.md",
        "patchSetId": 2
      },
      "lineNbr": 259,
      "author": {
        "id": 1115898
      },
      "writtenOn": "2023-08-17T17:50:27Z",
      "side": 1,
      "message": "flags for libyuv should have LIBYUV_ prefix",
      "revId": "4344f36d56a2c47fed1c69f59b623840431978a5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "be3e56b1_01ddb50c",
        "filename": "source/row_rvv.cc",
        "patchSetId": 2
      },
      "lineNbr": 798,
      "author": {
        "id": 1115898
      },
      "writtenOn": "2023-08-17T17:50:27Z",
      "side": 1,
      "message": "shouldnt you do this before vsetvl?\nUsually I would round up, but you have a remainder handler, so it is okay to do less, but your vl doesnt agree setvl, so I think weird things could happen.",
      "range": {
        "startLine": 798,
        "startChar": 19,
        "endLine": 798,
        "endChar": 77
      },
      "revId": "4344f36d56a2c47fed1c69f59b623840431978a5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ca124fce_024cd9f8",
        "filename": "source/row_rvv.cc",
        "patchSetId": 2
      },
      "lineNbr": 798,
      "author": {
        "id": 1575067
      },
      "writtenOn": "2023-08-18T01:41:39Z",
      "side": 1,
      "message": "\u003e shouldnt you do this before vsetvl?\n\u003e Usually I would round up, but you have a remainder handler, so it is okay to do less, but your vl doesnt agree setvl, so I think weird things could happen.\n\nThank you to catch this. You are right. Compiler\u0027ll help to generate extra vsetvl to handle.",
      "parentUuid": "be3e56b1_01ddb50c",
      "range": {
        "startLine": 798,
        "startChar": 19,
        "endLine": 798,
        "endChar": 77
      },
      "revId": "4344f36d56a2c47fed1c69f59b623840431978a5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "64a0cf37_5ed59371",
        "filename": "source/row_rvv.cc",
        "patchSetId": 2
      },
      "lineNbr": 814,
      "author": {
        "id": 1115898
      },
      "writtenOn": "2023-08-17T17:50:27Z",
      "side": 1,
      "message": "So un-RISC-V like!  I\u0027ll leave it to you.\nIn the end, unless vrgather is an especially fast instruction, I think you may want to avoid using ARGBShuffle for simple functions.  e.g. ARGBToBGRA could be implemented in a number of ways.",
      "revId": "4344f36d56a2c47fed1c69f59b623840431978a5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d836dc4f_4b115985",
        "filename": "source/row_rvv.cc",
        "patchSetId": 2
      },
      "lineNbr": 814,
      "author": {
        "id": 1575067
      },
      "writtenOn": "2023-08-18T01:41:39Z",
      "side": 1,
      "message": "\u003e So un-RISC-V like!  I\u0027ll leave it to you.\n\u003e In the end, unless vrgather is an especially fast instruction, I think you may want to avoid using ARGBShuffle for simple functions.  e.g. ARGBToBGRA could be implemented in a number of ways.\n\nAgree with you. I can prepare other CL to build a path and implement with segment load \u0026 stroe",
      "parentUuid": "64a0cf37_5ed59371",
      "revId": "4344f36d56a2c47fed1c69f59b623840431978a5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ],
  "submitRequirementResults": [
    {
      "submitRequirement": {
        "name": "Code-Owners",
        "description": {
          "value": "User with the code owner override approved the change"
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "has:enabled_code-owners"
          }
        },
        "submittabilityExpression": {
          "expressionString": "has:approval_code-owners"
        },
        "overrideExpression": {
          "value": {
            "expressionString": "label:Owners-Override\u003d+1"
          }
        },
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"has:enabled_code-owners"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["has:enabled_code-owners"],"failingAtoms":[]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"has:approval_code-owners"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["has:approval_code-owners"],"failingAtoms":[]}
      },
      "overrideExpressionResult": {
        "value": {"expression":{"expressionString":"label:Owners-Override=+1"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["label:Owners-Override=+1"]}
      },
      "patchSetCommitId": "4344f36d56a2c47fed1c69f59b623840431978a5",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Code-Review",
        "description": {
          "value": "Submit requirement for the \u0027Code-Review\u0027 label"
        },
        "applicabilityExpression": {},
        "submittabilityExpression": {
          "expressionString": "label:Code-Review\u003dMAX,user\u003dnon_uploader -label:Code-Review\u003dMIN"
        },
        "overrideExpression": {
          "value": {
            "expressionString": "label:Bot-Commit\u003d+1 AND -label:Code-Review\u003dMIN"
          }
        },
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {},
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"label:Code-Review=MAX,user=non_uploader -label:Code-Review=MIN"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["label:Code-Review=MAX,user=non_uploader"],"failingAtoms":["label:Code-Review=MIN"]}
      },
      "overrideExpressionResult": {
        "value": {"expression":{"expressionString":"label:Bot-Commit=+1 AND -label:Code-Review=MIN"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["label:Bot-Commit=+1","label:Code-Review=MIN"]}
      },
      "patchSetCommitId": "4344f36d56a2c47fed1c69f59b623840431978a5",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Review-Enforcement",
        "description": {
          "value": "Two Google employees must approve the change. Uploading the change or voting positively on Code-Review count as approval."
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "is:review-enforced_gerrit"
          }
        },
        "submittabilityExpression": {
          "expressionString": "is:review-enforcement-satisfied_gerrit"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": false
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforced_gerrit"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["is:review-enforced_gerrit"]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforcement-satisfied_gerrit"},"status":"NOT_EVALUATED","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":[]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "4344f36d56a2c47fed1c69f59b623840431978a5",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Verified",
        "description": {
          "value": "Submit requirement for the \u0027Verified\u0027 label"
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "is:false"
          }
        },
        "submittabilityExpression": {
          "expressionString": "is:true"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:false"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["is:false"]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:true"},"status":"NOT_EVALUATED","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":[]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "4344f36d56a2c47fed1c69f59b623840431978a5",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    }
  ]
}