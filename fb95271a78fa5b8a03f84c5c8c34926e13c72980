{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "7f8cd7c7_20534de0",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1575067
      },
      "writtenOn": "2023-07-12T05:27:59Z",
      "side": 1,
      "message": "Hi, we provide this CL to enable ARGBBlendRow_RVV/BlendPlaneRow_RVV.\nPlease help to review.",
      "revId": "fb95271a78fa5b8a03f84c5c8c34926e13c72980",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "2199c70c_7e8d9827",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1001562
      },
      "writtenOn": "2023-07-17T21:51:07Z",
      "side": 1,
      "message": "Frank should take a look at this.",
      "revId": "fb95271a78fa5b8a03f84c5c8c34926e13c72980",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2567b5fb_2f54e82e",
        "filename": "source/row_rvv.cc",
        "patchSetId": 1
      },
      "lineNbr": 931,
      "author": {
        "id": 1001562
      },
      "writtenOn": "2023-07-17T21:51:07Z",
      "side": 1,
      "message": "1. Nit: add \"been\" before \"pre-multiplied\"\n\n2. The word \"src_argb\" appears twice in this sentence. One of them seems redundant.",
      "revId": "fb95271a78fa5b8a03f84c5c8c34926e13c72980",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "707ce26a_ccddf4ff",
        "filename": "source/row_rvv.cc",
        "patchSetId": 1
      },
      "lineNbr": 931,
      "author": {
        "id": 1575067
      },
      "writtenOn": "2023-07-24T01:53:51Z",
      "side": 1,
      "message": "Acknowledged",
      "parentUuid": "2567b5fb_2f54e82e",
      "revId": "fb95271a78fa5b8a03f84c5c8c34926e13c72980",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a6bc81b4_f75df533",
        "filename": "source/row_rvv.cc",
        "patchSetId": 1
      },
      "lineNbr": 967,
      "author": {
        "id": 1001562
      },
      "writtenOn": "2023-07-17T21:51:07Z",
      "side": 1,
      "message": "Since `w` is an unsigned type (`size_t`), we need to guarantee that `w` becomes exactly 0, otherwise the `w \u003e 0` test at line 972 will stay true, resulting in an infinite loop.\n\nCan we guarantee that?",
      "revId": "fb95271a78fa5b8a03f84c5c8c34926e13c72980",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a7e80718_d92dee2c",
        "filename": "source/row_rvv.cc",
        "patchSetId": 1
      },
      "lineNbr": 967,
      "author": {
        "id": 1575067
      },
      "writtenOn": "2023-07-24T01:53:51Z",
      "side": 1,
      "message": "\u003e Since `w` is an unsigned type (`size_t`), we need to guarantee that `w` becomes exactly 0, otherwise the `w \u003e 0` test at line 972 will stay true, resulting in an infinite loop.\n\u003e \n\u003e Can we guarantee that?\n\nvl is produced by `vsetvl(w)`. `vsetvl(w)` guarantees that `vl \u003c\u003d w`. Hence, w never overflows in the code.",
      "parentUuid": "a6bc81b4_f75df533",
      "revId": "fb95271a78fa5b8a03f84c5c8c34926e13c72980",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3de80a7f_f9c078e9",
        "filename": "source/row_rvv.cc",
        "patchSetId": 1
      },
      "lineNbr": 971,
      "author": {
        "id": 1115898
      },
      "writtenOn": "2023-07-18T07:47:09Z",
      "side": 1,
      "message": "seems wasteful to set this to 0 on the last loop.  I wonder if after w -\u003d v1 if it would be worth\nif (w \u003d\u003d 0) break;\nand change the loop to an infinite loop\nfor (;;)",
      "revId": "fb95271a78fa5b8a03f84c5c8c34926e13c72980",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3ce4c932_1f83b6d6",
        "filename": "source/row_rvv.cc",
        "patchSetId": 1
      },
      "lineNbr": 971,
      "author": {
        "id": 1575067
      },
      "writtenOn": "2023-07-25T02:45:48Z",
      "side": 1,
      "message": "I upload pathchset3 to solve two problems in `blendrow_rvv()`.\n1. redundant `vsetvl()`\n2. Use `vsetvlmax()` for `v_255` to increase portability. Because `vsetvl(K)` doesn\u0027t guarantee to provide vlmax when K \u003e vlmax.\n\nFrom spec: Detail: https://github.com/riscv/riscv-v-spec/blob/master/v-spec.adoc#63-constraints-on-setting-vl \n\u003e 1. vl \u003d AVL if AVL ≤ VLMAX\n\u003e 2. ceil(AVL / 2) ≤ vl ≤ VLMAX if AVL \u003c (2 * VLMAX)\n\u003e 3. vl \u003d VLMAX if AVL ≥ (2 * VLMAX)\n\nRules 2 \u0026 3 provide a room to return `vl \u003c vlmax` when `K \u003e vlmax`.\nSimilar portability problems are in other RVV kernels. I\u0027ll provide other CL to solve them.",
      "parentUuid": "3de80a7f_f9c078e9",
      "revId": "fb95271a78fa5b8a03f84c5c8c34926e13c72980",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}