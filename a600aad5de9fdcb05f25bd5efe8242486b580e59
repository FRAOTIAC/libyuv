{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "fd321f7d_77dda14c",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1115898
      },
      "writtenOn": "2024-05-01T19:46:24Z",
      "side": 1,
      "message": "Overall okay, but some nits on naming.",
      "revId": "a600aad5de9fdcb05f25bd5efe8242486b580e59",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "968f94ad_fc84a1c6",
        "filename": "source/row_any.cc",
        "patchSetId": 1
      },
      "lineNbr": 2289,
      "author": {
        "id": 1115898
      },
      "writtenOn": "2024-05-01T19:46:24Z",
      "side": 1,
      "message": "An interesting use of Any functions.  Size is almost always a multiple of 2.\n\nFor some functions, but not this one, rows get coalesced into a single row function call of width * height where width can be odd, but if height is even, the count will still be even.\n\nNormally this should be your output vector size... vl.\nI guess it will still be okay.  If the width if 1001 it will call the SVE row function for 1000 and the last 1 will be copied, padded, and call the SVE with width of 1.",
      "revId": "a600aad5de9fdcb05f25bd5efe8242486b580e59",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "3ba848ff_c3ddf1eb",
        "filename": "source/row_any.cc",
        "patchSetId": 1
      },
      "lineNbr": 2289,
      "author": {
        "id": 1571352
      },
      "writtenOn": "2024-05-02T12:21:48Z",
      "side": 1,
      "message": "Indeed. My original implementation used the vector length here rather than 1 but using the vector length meant that for a VL of 2048 bits we ended up looking for multiplies of 256 elements which seems far too strong a requirement, especially given that we have an easy way of handling most of the remainder with predication anyway.",
      "parentUuid": "968f94ad_fc84a1c6",
      "revId": "a600aad5de9fdcb05f25bd5efe8242486b580e59",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5e9afebc_2ffceb78",
        "filename": "source/row_sve.cc",
        "patchSetId": 1
      },
      "lineNbr": 294,
      "author": {
        "id": 1115898
      },
      "writtenOn": "2024-05-01T19:46:24Z",
      "side": 1,
      "message": "prefer acronyms are upper case and Arr is not a consistent term.  First start with the full word - Array.  But thats doesnt tells us what the array (a vector) is.  These are Coefficients, so maybe\n kABGRToUVJCoefficients",
      "range": {
        "startLine": 294,
        "startChar": 21,
        "endLine": 294,
        "endChar": 34
      },
      "fixSuggestions": [
        {
          "fixId": "87a44c17_f51a6dad",
          "description": "prompt_to_edit API",
          "replacements": [
            {
              "path": "source/row_sve.cc",
              "range": {
                "startLine": 269,
                "startChar": 0,
                "endLine": 270,
                "endChar": 0
              },
              "replacement": "static const int16_t kArgbToUvCoefficients[] \u003d {\n"
            },
            {
              "path": "source/row_sve.cc",
              "range": {
                "startLine": 274,
                "startChar": 0,
                "endLine": 275,
                "endChar": 0
              },
              "replacement": "static const int16_t kRgbaToUvCoefficients[] \u003d {\n"
            },
            {
              "path": "source/row_sve.cc",
              "range": {
                "startLine": 279,
                "startChar": 0,
                "endLine": 280,
                "endChar": 0
              },
              "replacement": "static const int16_t kBgraToUvCoefficients[] \u003d {\n"
            },
            {
              "path": "source/row_sve.cc",
              "range": {
                "startLine": 284,
                "startChar": 0,
                "endLine": 285,
                "endChar": 0
              },
              "replacement": "static const int16_t kAbgrToUvCoefficients[] \u003d {\n"
            },
            {
              "path": "source/row_sve.cc",
              "range": {
                "startLine": 289,
                "startChar": 0,
                "endLine": 290,
                "endChar": 0
              },
              "replacement": "static const int16_t kArgbToUvjCoefficients[] \u003d {\n"
            },
            {
              "path": "source/row_sve.cc",
              "range": {
                "startLine": 294,
                "startChar": 0,
                "endLine": 295,
                "endChar": 0
              },
              "replacement": "static const int16_t kAbgrToUvjCoefficients[] \u003d {\n"
            },
            {
              "path": "source/row_sve.cc",
              "range": {
                "startLine": 454,
                "startChar": 0,
                "endLine": 455,
                "endChar": 0
              },
              "replacement": "                         kArgbToUvCoefficients);\n"
            },
            {
              "path": "source/row_sve.cc",
              "range": {
                "startLine": 463,
                "startChar": 0,
                "endLine": 464,
                "endChar": 0
              },
              "replacement": "                         kArgbToUvjCoefficients);\n"
            },
            {
              "path": "source/row_sve.cc",
              "range": {
                "startLine": 472,
                "startChar": 0,
                "endLine": 473,
                "endChar": 0
              },
              "replacement": "                         kAbgrToUvjCoefficients);\n"
            },
            {
              "path": "source/row_sve.cc",
              "range": {
                "startLine": 481,
                "startChar": 0,
                "endLine": 482,
                "endChar": 0
              },
              "replacement": "                         kBgraToUvCoefficients);\n"
            },
            {
              "path": "source/row_sve.cc",
              "range": {
                "startLine": 490,
                "startChar": 0,
                "endLine": 491,
                "endChar": 0
              },
              "replacement": "                         kAbgrToUvCoefficients);\n"
            },
            {
              "path": "source/row_sve.cc",
              "range": {
                "startLine": 499,
                "startChar": 0,
                "endLine": 500,
                "endChar": 0
              },
              "replacement": "                         kRgbaToUvCoefficients);\n"
            }
          ]
        }
      ],
      "revId": "a600aad5de9fdcb05f25bd5efe8242486b580e59",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "55186425_d15861a2",
        "filename": "source/row_sve.cc",
        "patchSetId": 1
      },
      "lineNbr": 294,
      "author": {
        "id": 1571352
      },
      "writtenOn": "2024-05-03T16:48:45Z",
      "side": 1,
      "message": "Fixed in https://chromium-review.googlesource.com/c/libyuv/libyuv/+/5513544",
      "parentUuid": "5e9afebc_2ffceb78",
      "range": {
        "startLine": 294,
        "startChar": 21,
        "endLine": 294,
        "endChar": 34
      },
      "revId": "a600aad5de9fdcb05f25bd5efe8242486b580e59",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "da5dea05_5c9284f0",
        "filename": "source/row_sve.cc",
        "patchSetId": 1
      },
      "lineNbr": 331,
      "author": {
        "id": 1115898
      },
      "writtenOn": "2024-05-01T19:46:24Z",
      "side": 1,
      "message": "I think you\u0027ve ported what Neon currently does, which is for 4:2:0 you sum the samples, and then later use coefficients that are half as big.  The issue is the coefficients loss accuracy.\nYou\u0027re using 16 bit, so you could make up for that, but then the results are not \u0027exact\u0027... they dont match the other platforms exactly.\n\nI\u0027m thinking subsampling needs a redesign later\n1. Implement ARGBToUV444 where there is no subsampling.\nIdeally implement ARGBToU and ARGBToV because I think 2 passes, each outputting a plane, will be faster than 1 pass.  And hopefully they can use the same code with different coefficients.\n2. Implement subsampling after the UV conversion using subsampling row functions.  The ARGBToI420 would call 2 row functions a row at a time.\nFor ARGBToI422 there is no vertical subsampling, just a horizontal average.\n\nThe current Intel version does an average of the 4 argb pixels, allowing the coefficients to have 1 more bit than the Neon version, and that turns out to solve a quality issue on the Neon version.\nSubsampling as a final stage should loss less quality, and should scale to 10 bit formats better.",
      "fixSuggestions": [
        {
          "fixId": "29c59b8b_ce47007c",
          "description": "prompt_to_edit API",
          "replacements": [
            {
              "path": "source/row_sve.cc",
              "range": {
                "startLine": 331,
                "startChar": 0,
                "endLine": 339,
                "endChar": 0
              },
              "replacement": "      \"uaddlb   z16.h, z0.b, z4.b                   \\n\"  // brbrbrbrbr\n      \"uaddlt   z17.h, z0.b, z4.b                   \\n\"  // gagagagag\n      \"uaddlb   z18.h, z1.b, z5.b                   \\n\"  // brbrbrbrbr\n      \"uaddlt   z19.h, z1.b, z5.b                   \\n\"  // gagagagag\n      \"uaddlb   z20.h, z2.b, z6.b                   \\n\"  // brbrbrbrbr\n      \"uaddlt   z21.h, z2.b, z6.b                   \\n\"  // gagagagag\n      \"uaddlb   z22.h, z3.b, z7.b                   \\n\"  // brbrbrbrbr\n      \"uaddlt   z23.h, z3.b, z7.b                   \\n\"  // gagagagag\n"
            },
            {
              "path": "source/row_sve.cc",
              "range": {
                "startLine": 410,
                "startChar": 0,
                "endLine": 412,
                "endChar": 0
              },
              "replacement": "      \"uaddlb   z16.h, z0.b, z4.b                   \\n\"  // brbrbrbrbr\n      \"uaddlt   z17.h, z0.b, z4.b                   \\n\"  // gagagagag\n"
            }
          ]
        }
      ],
      "revId": "a600aad5de9fdcb05f25bd5efe8242486b580e59",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4fc4a49e_7cc7d6ac",
        "filename": "source/row_sve.cc",
        "patchSetId": 1
      },
      "lineNbr": 454,
      "author": {
        "id": 1115898
      },
      "writtenOn": "2024-05-01T19:46:24Z",
      "side": 1,
      "message": "Note the intent is to make the Matrix functions and constants public so they can be implemented on Intel and C as well.\nIf you have time, implement the row_common.cc version, which should exactly mimic the SVE code, and we can have Intel use the C code until it is ported to AVX.",
      "fixSuggestions": [
        {
          "fixId": "e0e86ee8_55579e9a",
          "description": "prompt_to_edit API",
          "replacements": [
            {
              "path": "source/row_sve.cc",
              "range": {
                "startLine": 264,
                "startChar": 0,
                "endLine": 298,
                "endChar": 0
              },
              "replacement": ""
            },
            {
              "path": "source/row_sve.cc",
              "range": {
                "startLine": 454,
                "startChar": 0,
                "endLine": 455,
                "endChar": 0
              },
              "replacement": "                         kARGBToUVMatrix);\n"
            },
            {
              "path": "source/row_sve.cc",
              "range": {
                "startLine": 463,
                "startChar": 0,
                "endLine": 464,
                "endChar": 0
              },
              "replacement": "                         kARGBToUVJMatrix);\n"
            },
            {
              "path": "source/row_sve.cc",
              "range": {
                "startLine": 472,
                "startChar": 0,
                "endLine": 473,
                "endChar": 0
              },
              "replacement": "                         kABGRToUVJMatrix);\n"
            },
            {
              "path": "source/row_sve.cc",
              "range": {
                "startLine": 481,
                "startChar": 0,
                "endLine": 482,
                "endChar": 0
              },
              "replacement": "                         kBGRAToUVMatrix);\n"
            },
            {
              "path": "source/row_sve.cc",
              "range": {
                "startLine": 490,
                "startChar": 0,
                "endLine": 491,
                "endChar": 0
              },
              "replacement": "                         kABGRToUVMatrix);\n"
            },
            {
              "path": "source/row_sve.cc",
              "range": {
                "startLine": 499,
                "startChar": 0,
                "endLine": 500,
                "endChar": 0
              },
              "replacement": "                         kRGBAToUVMatrix);\n"
            }
          ]
        }
      ],
      "revId": "a600aad5de9fdcb05f25bd5efe8242486b580e59",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "51303e2b_351a4008",
        "filename": "source/row_sve.cc",
        "patchSetId": 1
      },
      "lineNbr": 454,
      "author": {
        "id": 1571352
      },
      "writtenOn": "2024-05-02T12:21:48Z",
      "side": 1,
      "message": "Ack, will put it on the TODO list!",
      "parentUuid": "4fc4a49e_7cc7d6ac",
      "revId": "a600aad5de9fdcb05f25bd5efe8242486b580e59",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ],
  "submitRequirementResults": [
    {
      "submitRequirement": {
        "name": "Code-Review",
        "description": {
          "value": "Submit requirement for the \u0027Code-Review\u0027 label"
        },
        "applicabilityExpression": {},
        "submittabilityExpression": {
          "expressionString": "label:Code-Review\u003dMAX,user\u003dnon_uploader -label:Code-Review\u003dMIN"
        },
        "overrideExpression": {
          "value": {
            "expressionString": "label:Bot-Commit\u003d+1 AND -label:Code-Review\u003dMIN"
          }
        },
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {},
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"label:Code-Review=MAX,user=non_uploader -label:Code-Review=MIN"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["label:Code-Review=MAX,user=non_uploader"],"failingAtoms":["label:Code-Review=MIN"]}
      },
      "overrideExpressionResult": {
        "value": {"expression":{"expressionString":"label:Bot-Commit=+1 AND -label:Code-Review=MIN"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["label:Bot-Commit=+1","label:Code-Review=MIN"]}
      },
      "patchSetCommitId": "a600aad5de9fdcb05f25bd5efe8242486b580e59",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Review-Enforcement",
        "description": {
          "value": "Two Google employees must approve the change. Uploading the change or voting positively on Code-Review count as approval."
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "is:review-enforced_gerrit"
          }
        },
        "submittabilityExpression": {
          "expressionString": "is:review-enforcement-satisfied_gerrit"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": false
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforced_gerrit"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["is:review-enforced_gerrit"],"failingAtoms":[]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforcement-satisfied_gerrit"},"status":"NOT_EVALUATED","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":[]}
      },
      "overrideExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforced_gerrit"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["is:review-enforcement-satisfied_gerrit"]}
      },
      "patchSetCommitId": "a600aad5de9fdcb05f25bd5efe8242486b580e59",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {
        "value": true
      }
    },
    {
      "submitRequirement": {
        "name": "Verified",
        "description": {
          "value": "Submit requirement for the \u0027Verified\u0027 label"
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "is:false"
          }
        },
        "submittabilityExpression": {
          "expressionString": "is:true"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:false"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["is:false"]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:true"},"status":"NOT_EVALUATED","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":[]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "a600aad5de9fdcb05f25bd5efe8242486b580e59",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    }
  ]
}