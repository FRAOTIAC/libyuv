{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "8e1278cf_b939ac60",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1575067
      },
      "writtenOn": "2023-07-27T12:59:10Z",
      "side": 1,
      "message": "Hi, this cl replaces vsetvl outside the loop with vsetvlmax to increase protablilty.",
      "revId": "07cd54241f0e50b6babdfaa362c1d4e6b9f2fa1c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "9faaeb8d_779ed8c2",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1115898
      },
      "writtenOn": "2023-07-27T13:12:28Z",
      "side": 1,
      "message": "I dont understand your terminology, and am concerned that this will be slower when the vector size is large.  But let me paraphrase\n\nThe old way\n  size_t vl \u003d __riscv_vsetvl_e8m2(w);\n  vuint8m2_t v_a \u003d __riscv_vmv_v_x_u8m2(255u, vl);\n\noutside the loop would set v_a for \u0027w\u0027 elements,\nbut the \n size_t vl \u003d __riscv_vsetvl_e8m2(w);\ninside the loop, where w is less than or equal to the original w, could actually set a vl that is larger than the vl outside the loop, leaving garbage in v_a\n\ne.g.\nif w is 100 the and vectors are 64 bytes, a vsetvl will do 2 loops.\nit could do 64 on the first loop and then 36 for the next.\nbut it may be more efficient to have them more equally balanced and do 50 and then 50.  But 50 is not a power of 2 friendly number, so a processor might choose to round to a multiple of 16.  It could do 48 on the first pass and 52 on the last pass?  Is that allowed and the case we are solving?\nsize_t vl \u003d __riscv_vsetvlmax_e8m2();\nis the full vector size.  I like to imagine it is 16384 bytes, but w is 1.  This seems really inefficient to fill in multiple huge vectors with 255, when w is often small.\nThey dont have a version of this function that takes a w and it sets the maximum size of all the iterations?",
      "revId": "07cd54241f0e50b6babdfaa362c1d4e6b9f2fa1c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "a07dec15_29459bdd",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1575067
      },
      "writtenOn": "2023-07-27T13:28:01Z",
      "side": 1,
      "message": "\u003e e.g.\n\u003e if w is 100 the and vectors are 64 bytes, a vsetvl will do 2 loops.\n\u003e it could do 64 on the first loop and then 36 for the next.\n\u003e but it may be more efficient to have them more equally balanced and do 50 and then 50.  But 50 is not a power of 2 friendly number, so a processor might choose to round to a multiple of 16.  It could do 48 on the first pass and 52 on the last pass?  Is that allowed and the case we are solving?\n\nNot exactly the same.\nLet\u0027s consider the rule: `ceil(AVL / 2) \u003c\u003d vl \u003c\u003d  VLMAX if AVL \u003c (2 * VLMAX)`. \nIf setvlmax\u003d32 and w is 59, vsetvl(w) can return 29~59 based on spec\u0027s definitions.\nA edge case for `vsetvl(w) return 29` at first iterations. \nOur original implenmentation will fill 29 elements to v_a. \nThe problem happens in the second iteration. v_a only has 29 elements but we need to process 30 elements.\n\nI absolutely agree you `This seems really inefficient to fill in multiple huge vectors with 255, when w is often small.`. I\u0027ve not seen this situation happens. \n\nMaybe we can decide whether to apply this CL for the protability?\nThere are no problems now, we can fix it until blaming.",
      "parentUuid": "9faaeb8d_779ed8c2",
      "revId": "07cd54241f0e50b6babdfaa362c1d4e6b9f2fa1c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "c9030f7c_0bf5e450",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1575067
      },
      "writtenOn": "2023-07-27T13:56:15Z",
      "side": 1,
      "message": "My bad here.\nThe operation is ceil(avl/2), so the edge case for vsetvl(w) return 30 at first iterations. No problem in original implementations.",
      "parentUuid": "a07dec15_29459bdd",
      "revId": "07cd54241f0e50b6babdfaa362c1d4e6b9f2fa1c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "1ede5cba_a6fdfbe5",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1115898
      },
      "writtenOn": "2023-07-28T20:39:27Z",
      "side": 1,
      "message": "I can see many opportunities in the future where hardware may decide to make the vl smaller than max, but hopefully the first iteration is guaranteed to be the largest.  For example\niterations \u003d floor(width / maxvl)\nvl \u003d ceil(width / iterations).\nAnd in your example of 59, instead of 30, it would likely be more efficient to round up to a multiple of 16\ninstead of 30 and 29\nuse 32 and 27.\nso that loads are aligned and the registers used effectively.",
      "parentUuid": "c9030f7c_0bf5e450",
      "revId": "07cd54241f0e50b6babdfaa362c1d4e6b9f2fa1c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "d8c60a1f_bb0ae02a",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1575067
      },
      "writtenOn": "2023-08-01T06:50:07Z",
      "side": 1,
      "message": "Yes, it provides an opportunity for HW to do optimizations as you mentioned.",
      "parentUuid": "1ede5cba_a6fdfbe5",
      "revId": "07cd54241f0e50b6babdfaa362c1d4e6b9f2fa1c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ],
  "submitRequirementResults": [
    {
      "submitRequirement": {
        "name": "Code-Owners",
        "description": {
          "value": "User with the code owner override approved the change"
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "has:enabled_code-owners"
          }
        },
        "submittabilityExpression": {
          "expressionString": "has:approval_code-owners"
        },
        "overrideExpression": {
          "value": {
            "expressionString": "label:Owners-Override\u003d+1"
          }
        },
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"has:enabled_code-owners"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["has:enabled_code-owners"],"failingAtoms":[]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"has:approval_code-owners"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["has:approval_code-owners"],"failingAtoms":[]}
      },
      "overrideExpressionResult": {
        "value": {"expression":{"expressionString":"label:Owners-Override=+1"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["label:Owners-Override=+1"]}
      },
      "patchSetCommitId": "07cd54241f0e50b6babdfaa362c1d4e6b9f2fa1c",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Code-Review",
        "description": {
          "value": "Submit requirement for the \u0027Code-Review\u0027 label"
        },
        "applicabilityExpression": {},
        "submittabilityExpression": {
          "expressionString": "label:Code-Review\u003dMAX,user\u003dnon_uploader -label:Code-Review\u003dMIN"
        },
        "overrideExpression": {
          "value": {
            "expressionString": "label:Bot-Commit\u003d+1 AND -label:Code-Review\u003dMIN"
          }
        },
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {},
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"label:Code-Review=MAX,user=non_uploader -label:Code-Review=MIN"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["label:Code-Review=MAX,user=non_uploader"],"failingAtoms":["label:Code-Review=MIN"]}
      },
      "overrideExpressionResult": {
        "value": {"expression":{"expressionString":"label:Bot-Commit=+1 AND -label:Code-Review=MIN"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["label:Bot-Commit=+1","label:Code-Review=MIN"]}
      },
      "patchSetCommitId": "07cd54241f0e50b6babdfaa362c1d4e6b9f2fa1c",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Review-Enforcement",
        "description": {
          "value": "Two Google employees must approve the change. Uploading the change or voting positively on Code-Review count as approval."
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "is:review-enforced_gerrit"
          }
        },
        "submittabilityExpression": {
          "expressionString": "is:review-enforcement-satisfied_gerrit"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": false
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforced_gerrit"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["is:review-enforced_gerrit"]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforcement-satisfied_gerrit"},"status":"NOT_EVALUATED","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":[]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "07cd54241f0e50b6babdfaa362c1d4e6b9f2fa1c",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Verified",
        "description": {
          "value": "Submit requirement for the \u0027Verified\u0027 label"
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "is:false"
          }
        },
        "submittabilityExpression": {
          "expressionString": "is:true"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:false"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["is:false"]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:true"},"status":"NOT_EVALUATED","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":[]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "07cd54241f0e50b6babdfaa362c1d4e6b9f2fa1c",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    }
  ]
}