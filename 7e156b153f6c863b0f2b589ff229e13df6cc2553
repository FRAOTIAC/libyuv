{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "09b6049d_21f7dee3",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1115898
      },
      "writtenOn": "2024-05-27T21:58:54Z",
      "side": 1,
      "message": "The intent is to implement ARGB and UV Rotate using the low levels.  Or port the existing 8 bit transpose?\nThe high level for 16 and 32 bit would follow similar logic to 8 bit",
      "revId": "7e156b153f6c863b0f2b589ff229e13df6cc2553",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1104fd08_42828047",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1571352
      },
      "writtenOn": "2024-05-28T09:38:05Z",
      "side": 1,
      "message": "Hi Frank, I\u0027m not sure what you mean here, could you clarify?\n\nIf the intent is to eventually add an ARGBRotate or similar then perhaps it is better to leave these kernels here for the new function to use, but I guess probably there is nothing that needs such a function today if it doesn\u0027t already exist?\n\nOr if we have no immediate plans then perhaps it is better to remove them until we actually need them?",
      "parentUuid": "09b6049d_21f7dee3",
      "revId": "7e156b153f6c863b0f2b589ff229e13df6cc2553",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9c56258c_f46712b6",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1115898
      },
      "writtenOn": "2024-06-03T22:31:57Z",
      "side": 1,
      "message": "The intent is to implement 16 bit and 32 bit transpose.  Currently ARGBRotate uses a slow method - read a column, write a row.  This code prototypes how to do 4x4 transpose with just load and store.  Next step would be high levels, similar to how 8 bit is done.  I think we can keep it simple and handle remainders with an \u0027any\u0027 function, so it just needs to implement a block.\nThe high levels can be simplified... there is a RotatePlane (and ScalePlane) and those can be made public and extended to 16 and 32 bit in a format agnostic way.\nThen call them from higher levels to implement formats like NV12 (8 bit and 1/2 size UV), P010 - 16 bit with half size 32 bit UV.\n\nIts also interesting to see how SVE would prefer to transpose.  Does it need to be forced to a particular block size or does the block size vary by vl?",
      "parentUuid": "1104fd08_42828047",
      "revId": "7e156b153f6c863b0f2b589ff229e13df6cc2553",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ],
  "submitRequirementResults": [
    {
      "submitRequirement": {
        "name": "Code-Review",
        "description": {
          "value": "Submit requirement for the \u0027Code-Review\u0027 label"
        },
        "applicabilityExpression": {},
        "submittabilityExpression": {
          "expressionString": "label:Code-Review\u003dMAX,user\u003dnon_uploader -label:Code-Review\u003dMIN"
        },
        "overrideExpression": {
          "value": {
            "expressionString": "label:Bot-Commit\u003d+1 AND -label:Code-Review\u003dMIN"
          }
        },
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {},
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"label:Code-Review=MAX,user=non_uploader -label:Code-Review=MIN"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["label:Code-Review=MAX,user=non_uploader"],"failingAtoms":["label:Code-Review=MIN"]}
      },
      "overrideExpressionResult": {
        "value": {"expression":{"expressionString":"label:Bot-Commit=+1 AND -label:Code-Review=MIN"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["label:Bot-Commit=+1","label:Code-Review=MIN"]}
      },
      "patchSetCommitId": "7e156b153f6c863b0f2b589ff229e13df6cc2553",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Review-Enforcement",
        "description": {
          "value": "Two Google employees must approve the change. Uploading the change or voting positively on Code-Review count as approval."
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "is:review-enforced_gerrit"
          }
        },
        "submittabilityExpression": {
          "expressionString": "is:review-enforcement-satisfied_gerrit"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": false
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforced_gerrit"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["is:review-enforced_gerrit"]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforcement-satisfied_gerrit"},"status":"NOT_EVALUATED","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":[]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "7e156b153f6c863b0f2b589ff229e13df6cc2553",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Verified",
        "description": {
          "value": "Submit requirement for the \u0027Verified\u0027 label"
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "is:false"
          }
        },
        "submittabilityExpression": {
          "expressionString": "is:true"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:false"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["is:false"]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:true"},"status":"NOT_EVALUATED","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":[]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "7e156b153f6c863b0f2b589ff229e13df6cc2553",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    }
  ]
}