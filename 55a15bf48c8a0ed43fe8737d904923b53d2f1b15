{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "37c54a96_d7f45b13",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1482051
      },
      "writtenOn": "2021-03-10T03:37:20Z",
      "side": 1,
      "message": "This is the first step for AR64 support.\nI\u0027m not sure if there\u0027s need to convert between AR30 and AR64 formats. It\u0027s not added in this CL.\nThe following steps are merging / splitting support for AR64, and converting from 10/12 bit YUV(A) to AR64.",
      "revId": "55a15bf48c8a0ed43fe8737d904923b53d2f1b15",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "ff89b117_823fe35d",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1115898
      },
      "writtenOn": "2021-03-11T01:22:27Z",
      "side": 1,
      "message": "Could you add documentation on AB64 / AR64?\nAdd fourcc to video_common.h\nThis implements uint16_t channels 0 to 65535.\nFor future formats, fp16 would be nice.  Thats AB4H as a fourcc.\nWhere does AR64 and AB64 fourcc names come from?\nThe next step is YUV to RGB with a macro to write AR64 for row_gcc.  Ideally do the same on Neon but its a simple function on Neon... shift the 2.14 ARGB values up, and ST4 to store.\nFor all future conversions ensure there is Neon, but dont do mips.\nIts not essential to do AR30, but at the moment there is no YUV to AR64 so a 2 step conversion would ideally use YUV to AR30 and AR30 to AR64.\nor on neon where AR30 is not supported natively, a 2 step could be done with YUV to AR64 and AR64 to AR30.  If both steps are Neon thats faster than a 1 step C function.\nAR64 is substantially simplier to implement than AR4H in libyuv, but AB4H seems to be the most popular texture format.  A conversion from AR64 to AR4H can be done in place.\nI suggest opening a new bug for AB4H and use the existing bug for AB64.\n",
      "revId": "55a15bf48c8a0ed43fe8737d904923b53d2f1b15",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "f1718914_d9866cd5",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1482051
      },
      "writtenOn": "2021-03-11T04:16:21Z",
      "side": 1,
      "message": "I didn\u0027t find anywhere using AR64/AB64, and it seems most libraries just give up naming every format using 4 characters. We already have AR30 and AB30, so I think it\u0027s natural to call them AR64 and AB64.\n\nFor NEON we should first remove the subsampling in LOAD* macros, and change them to load samples as Y16UV8 in register.\n\nDo we want to do the u16-\u003efp16 in YUVToRGB Row function, or as a separated step like what we do on alpha attenuate?",
      "parentUuid": "ff89b117_823fe35d",
      "revId": "55a15bf48c8a0ed43fe8737d904923b53d2f1b15",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "442d00ed_aaf5fde9",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1115898
      },
      "writtenOn": "2021-03-11T07:44:13Z",
      "side": 1,
      "message": "\u0027completeness\u0027 is not a design goal for libyuv, so we could forego AR64 and AR4H and just do the AB64 and AB4H versions.  Its not clear anyone will use the AB64.. its not as common.  But the implementation is easy, so I\u0027m okay with adding it.\n\nRe neon.  agreed that is a major issue with the Neon for 444.\nFixing it isnt necessarily a prerequisite before adding  \n\nYUVToRGB in 1 step is always the goal.  The attenuate was meant to become a row function.  The row function itself could be done in row_common.cc as a 2 step row function... there are a few in row_common like that.\nThe attenuate itself is not perfectly accurate.  I made an attempt to improve it and make it portable, but it broke and had to be rolled back.  So best not to integrate it until its sorted out.\nThe attentuate feature is not that commonly needed anymore.  GPUs expect unattentuated.",
      "parentUuid": "f1718914_d9866cd5",
      "revId": "55a15bf48c8a0ed43fe8737d904923b53d2f1b15",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "73dee367_b60ead5c",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1115898
      },
      "writtenOn": "2021-03-11T07:44:13Z",
      "side": 1,
      "message": "overall pretty clean.\nNeon looks good.\nIntel would likely be faster using shuffle instead",
      "revId": "55a15bf48c8a0ed43fe8737d904923b53d2f1b15",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "dfe797df_c66774ef",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1482051
      },
      "writtenOn": "2021-03-11T15:20:49Z",
      "side": 1,
      "message": "CPU can do little things to half float, so programs using CPU to manipulate pixels use AB64 (e.g. libpng uses AB64 for 16BPC png images).\n\nRe neon: removing subsample requires rewrite the code to load pixels, so I\u0027d like it finished first. Are you working on it? If not I may try to do it.",
      "parentUuid": "442d00ed_aaf5fde9",
      "revId": "55a15bf48c8a0ed43fe8737d904923b53d2f1b15",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c8271bfe_15c52ae8",
        "filename": "include/libyuv/planar_functions.h",
        "patchSetId": 1
      },
      "lineNbr": 959,
      "author": {
        "id": 1115898
      },
      "writtenOn": "2021-03-11T07:44:13Z",
      "side": 1,
      "message": "it may make sense to relax the alignment constraint.  It still makes sense to align when defining them, but on westmere and beyond its 1 cycle for movdqu.",
      "revId": "55a15bf48c8a0ed43fe8737d904923b53d2f1b15",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "951903f5_04cc942c",
        "filename": "include/libyuv/planar_functions.h",
        "patchSetId": 1
      },
      "lineNbr": 959,
      "author": {
        "id": 1482051
      },
      "writtenOn": "2021-03-11T15:20:49Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "c8271bfe_15c52ae8",
      "revId": "55a15bf48c8a0ed43fe8737d904923b53d2f1b15",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "46c515d5_65775673",
        "filename": "include/libyuv/planar_functions.h",
        "patchSetId": 1
      },
      "lineNbr": 965,
      "author": {
        "id": 1115898
      },
      "writtenOn": "2021-03-11T07:44:13Z",
      "side": 1,
      "message": "as a user, it seems odd that this is uint8 and not uint16.  But I guess for both ARM and Intel the implementation are best with bytes",
      "revId": "55a15bf48c8a0ed43fe8737d904923b53d2f1b15",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "783db515_aafac008",
        "filename": "include/libyuv/planar_functions.h",
        "patchSetId": 1
      },
      "lineNbr": 965,
      "author": {
        "id": 1482051
      },
      "writtenOn": "2021-03-11T15:20:49Z",
      "side": 1,
      "message": "It uses pshufb underlying, so we want a uvec8 here.\nAlso there\u0027s no new assembly for this function. I\u0027m just reusing the assembly of ARGBShuffle.",
      "parentUuid": "46c515d5_65775673",
      "revId": "55a15bf48c8a0ed43fe8737d904923b53d2f1b15",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f9381fa5_4c3d8887",
        "filename": "include/libyuv/row.h",
        "patchSetId": 1
      },
      "lineNbr": 2615,
      "author": {
        "id": 1115898
      },
      "writtenOn": "2021-03-11T07:44:13Z",
      "side": 1,
      "message": "if you get a feeling that SSSE3 is taking more time than its worth, consider dropping it.  Old CPUs will still work with C.\nIf there is a compelling win, we\u0027ll add AVX512 in the future.",
      "revId": "55a15bf48c8a0ed43fe8737d904923b53d2f1b15",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a20457cb_c0e2ec4e",
        "filename": "include/libyuv/row.h",
        "patchSetId": 1
      },
      "lineNbr": 2615,
      "author": {
        "id": 1482051
      },
      "writtenOn": "2021-03-11T15:20:49Z",
      "side": 1,
      "message": "Do we now generally accept AVX512? If so I may try to write some AVX512 version functions.",
      "parentUuid": "f9381fa5_4c3d8887",
      "revId": "55a15bf48c8a0ed43fe8737d904923b53d2f1b15",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b0f8d7ee_27252e2b",
        "filename": "source/convert_argb.cc",
        "patchSetId": 1
      },
      "lineNbr": 2879,
      "author": {
        "id": 1115898
      },
      "writtenOn": "2021-03-11T07:44:13Z",
      "side": 1,
      "message": "the () around this is not necessary in C:\n(const uint8_t*)\u0026kShuffleMaskAR64ToAB64",
      "range": {
        "startLine": 2879,
        "startChar": 39,
        "endLine": 2879,
        "endChar": 61
      },
      "revId": "55a15bf48c8a0ed43fe8737d904923b53d2f1b15",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "7a193b77_0892a069",
        "filename": "source/convert_argb.cc",
        "patchSetId": 1
      },
      "lineNbr": 2879,
      "author": {
        "id": 1482051
      },
      "writtenOn": "2021-03-11T15:20:49Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "b0f8d7ee_27252e2b",
      "range": {
        "startLine": 2879,
        "startChar": 39,
        "endLine": 2879,
        "endChar": 61
      },
      "revId": "55a15bf48c8a0ed43fe8737d904923b53d2f1b15",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "efccdf71_b9637da2",
        "filename": "source/row_any.cc",
        "patchSetId": 1
      },
      "lineNbr": 1498,
      "author": {
        "id": 1115898
      },
      "writtenOn": "2021-03-11T07:44:13Z",
      "side": 1,
      "message": "remove all mips from new code;  mips folks will add it if they want it.",
      "revId": "55a15bf48c8a0ed43fe8737d904923b53d2f1b15",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "3c269cd6_6eeddaba",
        "filename": "source/row_any.cc",
        "patchSetId": 1
      },
      "lineNbr": 1498,
      "author": {
        "id": 1482051
      },
      "writtenOn": "2021-03-11T15:20:49Z",
      "side": 1,
      "message": "I\u0027m just changing the macro name from ANY11T to ANY11I. T for Type, I for Interpolate. I\u0027m adding ANY11T(ype) so this is renamed to the more suitable ANY11I(nterpolate).",
      "parentUuid": "efccdf71_b9637da2",
      "revId": "55a15bf48c8a0ed43fe8737d904923b53d2f1b15",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3f28fb56_faa60fa6",
        "filename": "source/row_common.cc",
        "patchSetId": 1
      },
      "lineNbr": 427,
      "author": {
        "id": 1115898
      },
      "writtenOn": "2021-03-11T07:44:13Z",
      "side": 1,
      "message": "there are 2 other ways to do this.  shift/or and multiple byte stores.\nI would choose whichever autovectorizes.",
      "revId": "55a15bf48c8a0ed43fe8737d904923b53d2f1b15",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "03740d98_6154ca38",
        "filename": "source/row_common.cc",
        "patchSetId": 1
      },
      "lineNbr": 427,
      "author": {
        "id": 1482051
      },
      "writtenOn": "2021-03-11T15:20:49Z",
      "side": 1,
      "message": "Compilers knows to convert this to shift so maybe it\u0027s fine, and this form looks clearer.\nClang doesn\u0027t autovectorize both ways, unless using avx512. Shift is faster than multiple byte stores under pure C.\nMore compilers autovectorize the shift version. So maybe left this as is.",
      "parentUuid": "3f28fb56_faa60fa6",
      "revId": "55a15bf48c8a0ed43fe8737d904923b53d2f1b15",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8c2e4db5_c1b90533",
        "filename": "source/row_common.cc",
        "patchSetId": 1
      },
      "lineNbr": 475,
      "author": {
        "id": 1115898
      },
      "writtenOn": "2021-03-11T07:44:13Z",
      "side": 1,
      "message": "this feels wrong.  Its not compatible with how the SIMD versions work.\nThe performance of the C code is not critical, since assembly should always be used.\nHaving functions that exactly match C and SIMD is useful for testing and to understand the code.",
      "revId": "55a15bf48c8a0ed43fe8737d904923b53d2f1b15",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "056389ee_2fa6d4f1",
        "filename": "source/row_common.cc",
        "patchSetId": 1
      },
      "lineNbr": 475,
      "author": {
        "id": 1482051
      },
      "writtenOn": "2021-03-11T15:20:49Z",
      "side": 1,
      "message": "We can only shuffle byte or dword, so to shuffle word we have to shuffle byte (pshufb).\nThis should be the way to extract index in uint_16 from shuffler used by pshufb.",
      "parentUuid": "8c2e4db5_c1b90533",
      "revId": "55a15bf48c8a0ed43fe8737d904923b53d2f1b15",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7ecf6183_aa4c4007",
        "filename": "source/row_gcc.cc",
        "patchSetId": 1
      },
      "lineNbr": 1091,
      "author": {
        "id": 1115898
      },
      "writtenOn": "2021-03-11T07:44:13Z",
      "side": 1,
      "message": "Consider PMOVZXBW and pshufb?",
      "range": {
        "startLine": 1091,
        "startChar": 26,
        "endLine": 1091,
        "endChar": 30
      },
      "revId": "55a15bf48c8a0ed43fe8737d904923b53d2f1b15",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "054b340f_3e281656",
        "filename": "source/row_gcc.cc",
        "patchSetId": 1
      },
      "lineNbr": 1091,
      "author": {
        "id": 1482051
      },
      "writtenOn": "2021-03-11T15:20:49Z",
      "side": 1,
      "message": "Use pshufb in ARGBToAB64 is slightly faster, and others are almost same speed on my machine.",
      "parentUuid": "7ecf6183_aa4c4007",
      "range": {
        "startLine": 1091,
        "startChar": 26,
        "endLine": 1091,
        "endChar": 30
      },
      "revId": "55a15bf48c8a0ed43fe8737d904923b53d2f1b15",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "14600d8e_f0755f47",
        "filename": "source/row_gcc.cc",
        "patchSetId": 1
      },
      "lineNbr": 1192,
      "author": {
        "id": 1115898
      },
      "writtenOn": "2021-03-11T07:44:13Z",
      "side": 1,
      "message": "consider\nVPMOVZXBW\nVPMOVZXBW\nVPSHUFB\nVPSHUFB\nvmovdqu \nvmovdqu \n6 instructions, same as now, but vpshufb is faster than vpunpcklbw and fewer dependencies.",
      "revId": "55a15bf48c8a0ed43fe8737d904923b53d2f1b15",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "431116a7_80488ce7",
        "filename": "source/row_gcc.cc",
        "patchSetId": 1
      },
      "lineNbr": 1192,
      "author": {
        "id": 1482051
      },
      "writtenOn": "2021-03-11T15:20:49Z",
      "side": 1,
      "message": "Performance is the same on my machine (Coffee lake). Is it actually faster on some CPU?",
      "parentUuid": "14600d8e_f0755f47",
      "revId": "55a15bf48c8a0ed43fe8737d904923b53d2f1b15",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b1fcc85e_da387a0b",
        "filename": "source/row_gcc.cc",
        "patchSetId": 1
      },
      "lineNbr": 1222,
      "author": {
        "id": 1115898
      },
      "writtenOn": "2021-03-11T07:44:13Z",
      "side": 1,
      "message": "Consider remove unpack - have vpshufb replicate the bytes.",
      "range": {
        "startLine": 1222,
        "startChar": 0,
        "endLine": 1222,
        "endChar": 52
      },
      "revId": "55a15bf48c8a0ed43fe8737d904923b53d2f1b15",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "8bc9a9da_98a27a9c",
        "filename": "source/row_gcc.cc",
        "patchSetId": 1
      },
      "lineNbr": 1222,
      "author": {
        "id": 1482051
      },
      "writtenOn": "2021-03-11T15:20:49Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "b1fcc85e_da387a0b",
      "range": {
        "startLine": 1222,
        "startChar": 0,
        "endLine": 1222,
        "endChar": 52
      },
      "revId": "55a15bf48c8a0ed43fe8737d904923b53d2f1b15",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "0d8aa7b1_35845a22",
        "filename": "source/row_gcc.cc",
        "patchSetId": 1
      },
      "lineNbr": 1239,
      "author": {
        "id": 1115898
      },
      "writtenOn": "2021-03-11T07:44:13Z",
      "side": 1,
      "message": "FYI  VPMOVUSWB would make this easier.",
      "range": {
        "startLine": 1239,
        "startChar": 0,
        "endLine": 1239,
        "endChar": 49
      },
      "revId": "55a15bf48c8a0ed43fe8737d904923b53d2f1b15",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "a5521b39_4d7d90d2",
        "filename": "source/row_gcc.cc",
        "patchSetId": 1
      },
      "lineNbr": 1239,
      "author": {
        "id": 1482051
      },
      "writtenOn": "2021-03-11T15:20:49Z",
      "side": 1,
      "message": "It\u0027s AVX512...",
      "parentUuid": "0d8aa7b1_35845a22",
      "range": {
        "startLine": 1239,
        "startChar": 0,
        "endLine": 1239,
        "endChar": 49
      },
      "revId": "55a15bf48c8a0ed43fe8737d904923b53d2f1b15",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "bee45869_44372e0a",
        "filename": "unit_test/convert_test.cc",
        "patchSetId": 1
      },
      "lineNbr": 1517,
      "author": {
        "id": 1115898
      },
      "writtenOn": "2021-03-11T07:44:13Z",
      "side": 1,
      "message": "the above macros might be cleaner if \u0027STRIDE_A\u0027 were expressed as 4 elements instead of 8 bytes?",
      "revId": "55a15bf48c8a0ed43fe8737d904923b53d2f1b15",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "481f75b5_48797957",
        "filename": "unit_test/convert_test.cc",
        "patchSetId": 1
      },
      "lineNbr": 1517,
      "author": {
        "id": 1482051
      },
      "writtenOn": "2021-03-11T15:20:49Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "bee45869_44372e0a",
      "revId": "55a15bf48c8a0ed43fe8737d904923b53d2f1b15",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}