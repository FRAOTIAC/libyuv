{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "55e56cea_b5fceb9b",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1115898
      },
      "writtenOn": "2024-04-26T19:54:11Z",
      "side": 1,
      "message": "James, can you review this cpu detect change for libyuv?",
      "revId": "26d44bb08b80b13d6b67bf1c2550103a0a092f01",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "9ce80961_3e2a0f17",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1002219
      },
      "writtenOn": "2024-04-26T20:18:05Z",
      "side": 1,
      "message": "These are the equivalent changes in libaom and libvpx:\n\n* https://aomedia-review.googlesource.com/c/aom/+/178022\n* https://aomedia-review.googlesource.com/c/aom/+/178023\n* https://chromium-review.googlesource.com/c/webm/libvpx/+/4833331",
      "revId": "26d44bb08b80b13d6b67bf1c2550103a0a092f01",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "59730ada_e276b070",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1002219
      },
      "writtenOn": "2024-04-26T20:18:05Z",
      "side": 1,
      "message": "\u003e James, can you review this cpu detect change for libyuv?\n\nLooks OK aside from your comments.",
      "parentUuid": "55e56cea_b5fceb9b",
      "revId": "26d44bb08b80b13d6b67bf1c2550103a0a092f01",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "cd54c3cc_ed8e4096",
        "filename": "source/cpu_id.cc",
        "patchSetId": 2
      },
      "lineNbr": 38,
      "author": {
        "id": 1115898
      },
      "writtenOn": "2024-04-25T21:03:47Z",
      "side": 1,
      "message": "I think you only intend to use this on ARM, and it is likely not allowed in the chromium sandbox, so additional ifdef would be good.",
      "revId": "26d44bb08b80b13d6b67bf1c2550103a0a092f01",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "768ffa70_cc451abf",
        "filename": "source/cpu_id.cc",
        "patchSetId": 2
      },
      "lineNbr": 38,
      "author": {
        "id": 1571352
      },
      "writtenOn": "2024-04-26T15:25:02Z",
      "side": 1,
      "message": "I think these functions are also used by Chromium so perhaps they are fine in the sandbox? e.g. https://source.chromium.org/chromium/chromium/src/+/main:v8/src/base/cpu.cc;l\u003d786?q\u003dIsProcessorFeaturePresent%20base%2F\u0026ss\u003dchromium%2Fchromium%2Fsrc",
      "parentUuid": "cd54c3cc_ed8e4096",
      "revId": "26d44bb08b80b13d6b67bf1c2550103a0a092f01",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7055b02f_767b6105",
        "filename": "source/cpu_id.cc",
        "patchSetId": 2
      },
      "lineNbr": 38,
      "author": {
        "id": 1002219
      },
      "writtenOn": "2024-04-26T20:18:05Z",
      "side": 1,
      "message": "\u003e I think these functions are also used by Chromium so perhaps they are fine in the sandbox? e.g. https://source.chromium.org/chromium/chromium/src/+/main:v8/src/base/cpu.cc;l\u003d786?q\u003dIsProcessorFeaturePresent%20base%2F\u0026ss\u003dchromium%2Fchromium%2Fsrc\n\nWe haven\u0027t run into any issues in libaom or libvpx where both have runtime cpu detection enabled for Arm targets now.",
      "parentUuid": "768ffa70_cc451abf",
      "revId": "26d44bb08b80b13d6b67bf1c2550103a0a092f01",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "81e79589_0696f797",
        "filename": "source/cpu_id.cc",
        "patchSetId": 2
      },
      "lineNbr": 181,
      "author": {
        "id": 1115898
      },
      "writtenOn": "2024-04-25T21:03:47Z",
      "side": 1,
      "message": "I think this only works on ARM?  The old code could run on x86 to parse and arm /proc/cpuinfo but the hwcap only works when built for arm and run on arm or qemu.",
      "revId": "26d44bb08b80b13d6b67bf1c2550103a0a092f01",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7a20536e_577d8eae",
        "filename": "source/cpu_id.cc",
        "patchSetId": 2
      },
      "lineNbr": 181,
      "author": {
        "id": 1571352
      },
      "writtenOn": "2024-04-29T12:11:06Z",
      "side": 1,
      "message": "The actual hwcap testing code here should be fine running on any architecture since it is just checking the bitwise-and, I wrote it so that a user can in theory inject their own hwcap values as parameters in the same way that a user could in theory inject their own /proc/cpuinfo?\n\nAs far as I know though there isn\u0027t a way to currently provide a path to a custom /proc/cpuinfo though since the path is hardcoded in the call in GetCpuFlags, so I haven\u0027t attempted to wire up a way for a user to specify a custom set of hwcaps via an environment variable or similar.",
      "parentUuid": "81e79589_0696f797",
      "revId": "26d44bb08b80b13d6b67bf1c2550103a0a092f01",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e7ce4ff1_0ffec4d8",
        "filename": "source/cpu_id.cc",
        "patchSetId": 2
      },
      "lineNbr": 214,
      "author": {
        "id": 1115898
      },
      "writtenOn": "2024-04-26T20:32:48Z",
      "side": 1,
      "message": "This will fail on aarch32 devices that dont have Neon.  If there is a mechanism for detecting Neon, it would be good to use it.\nOtherwise I\u0027ve been trying to provide a way at compile time to build libyuv with all neon disabled.  Mainly comes up on embedded applications\nFuture embedded devices might have Helium and current ones can use ASIMD32, if there is a need to optimize for them.\nEmbedded applications that use libyuv would be things like finger print scanners, webcams and always on chips",
      "revId": "26d44bb08b80b13d6b67bf1c2550103a0a092f01",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "cd5e10e1_a395b608",
        "filename": "source/cpu_id.cc",
        "patchSetId": 2
      },
      "lineNbr": 214,
      "author": {
        "id": 1571352
      },
      "writtenOn": "2024-04-29T12:11:06Z",
      "side": 1,
      "message": "This is AArch64CpuCaps? ArmCpuCaps does not use this code path.",
      "parentUuid": "e7ce4ff1_0ffec4d8",
      "revId": "26d44bb08b80b13d6b67bf1c2550103a0a092f01",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f7feed21_9527c3b3",
        "filename": "source/cpu_id.cc",
        "patchSetId": 2
      },
      "lineNbr": 224,
      "author": {
        "id": 1115898
      },
      "writtenOn": "2024-04-26T20:32:48Z",
      "side": 1,
      "message": "This would break x86 Windows?",
      "revId": "26d44bb08b80b13d6b67bf1c2550103a0a092f01",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d3329955_ebeb3f94",
        "filename": "source/cpu_id.cc",
        "patchSetId": 2
      },
      "lineNbr": 224,
      "author": {
        "id": 1571352
      },
      "writtenOn": "2024-04-29T12:11:06Z",
      "side": 1,
      "message": "Not tested but I think this is okay, since PF_ARM_V82_DP_INSTRUCTIONS_AVAILABLE would not be defined on non-Arm windows platforms?",
      "parentUuid": "f7feed21_9527c3b3",
      "revId": "26d44bb08b80b13d6b67bf1c2550103a0a092f01",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1933e5e1_b8fce5cc",
        "filename": "source/cpu_id.cc",
        "patchSetId": 2
      },
      "lineNbr": 227,
      "author": {
        "id": 1115898
      },
      "writtenOn": "2024-04-25T21:03:47Z",
      "side": 1,
      "message": "keep in mind __APPLE__ includes many devices, OS and cpus.",
      "revId": "26d44bb08b80b13d6b67bf1c2550103a0a092f01",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ff250a2f_a7fddfe9",
        "filename": "source/cpu_id.cc",
        "patchSetId": 2
      },
      "lineNbr": 240,
      "author": {
        "id": 1115898
      },
      "writtenOn": "2024-04-26T20:32:48Z",
      "side": 1,
      "message": "In general \u0027ARM\u0027 supports AArch32 and well as AArch64.",
      "revId": "26d44bb08b80b13d6b67bf1c2550103a0a092f01",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "fd041224_6a79ec2f",
        "filename": "source/cpu_id.cc",
        "patchSetId": 2
      },
      "lineNbr": 240,
      "author": {
        "id": 1571352
      },
      "writtenOn": "2024-04-29T12:11:06Z",
      "side": 1,
      "message": "Not sure what you mean? This is AArch64CpuCaps, AArch32 continues to take the old /proc/cpuinfo code path in ArmCpuCaps.",
      "parentUuid": "ff250a2f_a7fddfe9",
      "revId": "26d44bb08b80b13d6b67bf1c2550103a0a092f01",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "dbd31b29_d3125be8",
        "filename": "source/cpu_id.cc",
        "patchSetId": 2
      },
      "lineNbr": 247,
      "author": {
        "id": 1115898
      },
      "writtenOn": "2024-04-26T20:32:48Z",
      "side": 1,
      "message": "Is I8MM supported?  When I use pytorch/cpuinfo isa_info on Apple M1 is reports I8MM is not supported.\n\nIt might be handy to expose these platform specific calls in the util/cpu_id.c or the unit test, so we can see the low levels or raw values and ensure they build/run on their own.",
      "revId": "26d44bb08b80b13d6b67bf1c2550103a0a092f01",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "976b8d8c_9f350b14",
        "filename": "source/cpu_id.cc",
        "patchSetId": 2
      },
      "lineNbr": 247,
      "author": {
        "id": 1571352
      },
      "writtenOn": "2024-04-29T12:11:06Z",
      "side": 1,
      "message": "I believe later Apple Silicon models support the I8MM extension. Agree that it could be good to hook the platform-specific calls up in a way that allows them to be unit-tested, do you have a preferred code layout in mind?",
      "parentUuid": "dbd31b29_d3125be8",
      "revId": "26d44bb08b80b13d6b67bf1c2550103a0a092f01",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}