{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "d6debf30_187922be",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1208520
      },
      "writtenOn": "2022-03-30T09:43:06Z",
      "side": 1,
      "message": "Hi, I have been implementing H264 422 (8 and 10 bits) decoding in libwebrtc and I found that some conversion/scaling functions were missing in libyuv but could be easily implemented on top of already existing functions:\n\nhttps://webrtc-review.googlesource.com/c/src/+/255380\nhttps://webrtc-review.googlesource.com/c/src/+/256964\n\nThis CL adds them so we don\u0027t have to include them in the libwebrtc code. ",
      "revId": "48b76927bd2b9272c8967d999d4020595a7f348a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e655c99d_6173bb6b",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1178490
      },
      "writtenOn": "2022-03-30T10:47:20Z",
      "side": 1,
      "message": "Thanks, I let Frank review this one (it might happen in a few days).",
      "parentUuid": "d6debf30_187922be",
      "revId": "48b76927bd2b9272c8967d999d4020595a7f348a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "0bb8b357_2792a353",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1234969
      },
      "writtenOn": "2022-03-30T13:26:00Z",
      "side": 1,
      "message": "A webrtc now also needs I210toI420, but this will be a tricky one, since there\u0027s not only a downscaling in UV planes, but also downsamping of bit depth. IIUC, no such conversion is currently done in libyuv.\n\nSeems like some kind of new ScalePlane function is needed, which would combine functionality of ScalePlane and Planar16bitTo8bit, so that it can all be done in one pass without first converting to I010 or I422 as a temporarily buffer. ",
      "revId": "48b76927bd2b9272c8967d999d4020595a7f348a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "0d44a467_6b9d0872",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1115898
      },
      "writtenOn": "2022-03-31T15:14:42Z",
      "side": 1,
      "message": "Looks good!  Thanks for the CL.",
      "revId": "48b76927bd2b9272c8967d999d4020595a7f348a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "4458917a_4ebb58cc",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1115898
      },
      "writtenOn": "2022-03-31T18:31:30Z",
      "side": 1,
      "message": "Best to open a specific libyuv issue for new I210ToI420 since it will require AVX/Neon to be fully efficient.\n\nBut the code will be simple enough.  Something like this:\n\n// Convert a row of 4:2:2 10 bit to a row of 4:2:0 8 bit\n// average 2 rows of 10 bit and output a row of 8 bit.\nvoid UV16To8Row_NEON(const uint16_t* src_u,\n                     int stride_u,\n                     uint8_t* dst_u,\n                     int depth,\n                     int width) {\n  const int shift \u003d 7 - depth;\n  const uint8_t* src_u2 \u003d src_u + stride_u;\n  asm volatile(\n      \"dup         v5.8h, %w5                    \\n\"\n      \"1:                                        \\n\"\n      \"ld1         {v0.8h,v1.8h}, [%0], #32      \\n\"  // load 16 pixels of 10b\n      \"subs        %w3, %w3, #16                 \\n\"\n      \"ld1         {v2.8h,v3.8h}, [%1], #32      \\n\"  // load next row\n      \"add         v0.8h, v0.8h, v2.8h           \\n\"  // add 2 rows\n      \"add         v1.8h, v1.8h, v3.8h           \\n\"\n      \"prfm        pldl1keep, [%0, 448]          \\n\"\n      \"ushl        v0.8h, v0.8h, v31.8h          \\n\"\n      \"ushl        v1.8h, v1.8h, v31.8h          \\n\"\n      \"prfm        pldl1keep, [%1, 448]          \\n\"\n      \"uqxtn       v0.8b, v0.8h                  \\n\"\n      \"uqxtn       v1.8b, v1.8h                  \\n\"\n      \"st1         {v0.8b,v1.8b}, [%2], #16      \\n\"  // store 16 pixels of 8b\n      \"b.gt        1b                            \\n\"\n      : \"+r\"(src_u),   // %0\n        \"+r\"(src_u2),  // %1\n        \"+r\"(dst_u),   // %2\n        \"+r\"(width)    // %3\n      : \"r\"(shift)     // %4\n      : \"cc\", \"memory\", \"v0\", \"v1\", \"v2\", \"v3\", \"v5\"  // Clobber List\n  );\n}",
      "parentUuid": "0bb8b357_2792a353",
      "revId": "48b76927bd2b9272c8967d999d4020595a7f348a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "596c0f75_04930952",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1115898
      },
      "writtenOn": "2022-04-01T01:41:50Z",
      "side": 1,
      "message": "Re 255380 is mainly I422Rotate and Scale.  Its not very compelling to have 422, 420, 444 entry points, when ScalePlane and RotatePlane are the core functions that need to be efficient.  I can\u0027t really add any performance.  There are other subsamplings even more rare, like 411 that I used to support, but removed.\n\nRe 256964 this is maining I210 support.  10 bit (and 9, 12 and 16 bit) is more interesting.  For anything that would benefit from a bit of avx/neon, please file a bug/request and/or CL.",
      "parentUuid": "e655c99d_6173bb6b",
      "revId": "48b76927bd2b9272c8967d999d4020595a7f348a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ],
  "submitRequirementResults": [
    {
      "submitRequirement": {
        "name": "Code-Owners",
        "description": {
          "value": "User with the code owner override approved the change"
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "has:enabled_code-owners"
          }
        },
        "submittabilityExpression": {
          "expressionString": "has:approval_code-owners"
        },
        "overrideExpression": {
          "value": {
            "expressionString": "label:Owners-Override\u003d+1"
          }
        },
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"has:enabled_code-owners"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["has:enabled_code-owners"],"failingAtoms":[]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"has:approval_code-owners"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["has:approval_code-owners"],"failingAtoms":[]}
      },
      "overrideExpressionResult": {
        "value": {"expression":{"expressionString":"label:Owners-Override=+1"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["label:Owners-Override=+1"]}
      },
      "patchSetCommitId": "48b76927bd2b9272c8967d999d4020595a7f348a",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Code-Review",
        "description": {
          "value": "Submit requirement for the \u0027Code-Review\u0027 label"
        },
        "applicabilityExpression": {},
        "submittabilityExpression": {
          "expressionString": "label:Code-Review\u003dMAX,user\u003dnon_uploader -label:Code-Review\u003dMIN"
        },
        "overrideExpression": {
          "value": {
            "expressionString": "label:Bot-Commit\u003d+1"
          }
        },
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {},
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"label:Code-Review=MAX,user=non_uploader -label:Code-Review=MIN"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["label:Code-Review=MAX,user=non_uploader"],"failingAtoms":["label:Code-Review=MIN"]}
      },
      "overrideExpressionResult": {
        "value": {"expression":{"expressionString":"label:Bot-Commit=+1"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["label:Bot-Commit=+1"]}
      },
      "patchSetCommitId": "48b76927bd2b9272c8967d999d4020595a7f348a",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Review-Enforcement",
        "description": {
          "value": "Two Google employees must approve the change. Uploading the change or voting positively on Code-Review count as approval."
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "is:review-enforced_gerrit"
          }
        },
        "submittabilityExpression": {
          "expressionString": "is:review-enforcement-satisfied_gerrit"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": false
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforced_gerrit"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["is:review-enforced_gerrit"]}
      },
      "submittabilityExpressionResult": {},
      "overrideExpressionResult": {},
      "patchSetCommitId": "48b76927bd2b9272c8967d999d4020595a7f348a",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Verified",
        "description": {
          "value": "Submit requirement for the \u0027Verified\u0027 label"
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "is:false"
          }
        },
        "submittabilityExpression": {
          "expressionString": "is:true"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:false"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["is:false"]}
      },
      "submittabilityExpressionResult": {},
      "overrideExpressionResult": {},
      "patchSetCommitId": "48b76927bd2b9272c8967d999d4020595a7f348a",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    }
  ]
}