{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "65a9ffd0_be921efa",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 1482051
      },
      "writtenOn": "2022-04-02T04:10:31Z",
      "side": 1,
      "message": "Frank: Please review. Thanks!",
      "revId": "99f2ea995c6874d525a971501467257bea02e5e6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "c3095246_316f0d31",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 1482051
      },
      "writtenOn": "2022-04-04T07:28:17Z",
      "side": 1,
      "message": "I will update the code later.",
      "revId": "99f2ea995c6874d525a971501467257bea02e5e6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "731fdb12_fd5887a2",
        "filename": "unit_test/color_test.cc",
        "patchSetId": 4
      },
      "lineNbr": 427,
      "author": {
        "id": 1115898
      },
      "writtenOn": "2022-04-03T18:59:36Z",
      "side": 1,
      "message": "Do you have a link to the table of xor values for this random generator?",
      "range": {
        "startLine": 427,
        "startChar": 0,
        "endLine": 427,
        "endChar": 63
      },
      "revId": "99f2ea995c6874d525a971501467257bea02e5e6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "df60ba19_c2448cce",
        "filename": "unit_test/color_test.cc",
        "patchSetId": 4
      },
      "lineNbr": 427,
      "author": {
        "id": 1482051
      },
      "writtenOn": "2022-04-04T07:28:17Z",
      "side": 1,
      "message": "I extend the RANDOM256 macro. I made discrete plots of generated values at https://bugs.chromium.org/p/libyuv/issues/detail?id\u003d923#c7.",
      "parentUuid": "731fdb12_fd5887a2",
      "range": {
        "startLine": 427,
        "startChar": 0,
        "endLine": 427,
        "endChar": 63
      },
      "revId": "99f2ea995c6874d525a971501467257bea02e5e6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e16fef67_9da394a6",
        "filename": "unit_test/color_test.cc",
        "patchSetId": 4
      },
      "lineNbr": 427,
      "author": {
        "id": 1115898
      },
      "writtenOn": "2022-04-15T19:56:25Z",
      "side": 1,
      "message": "Found a reference.  Its called LFSR\nhttps://en.wikipedia.org/wiki/Linear-feedback_shift_register\n\nIt may not been needed to randomize the values, if we exhaustive step thru all values, or set a larger step value that tests the full range, but skips some.",
      "parentUuid": "df60ba19_c2448cce",
      "range": {
        "startLine": 427,
        "startChar": 0,
        "endLine": 427,
        "endChar": 63
      },
      "revId": "99f2ea995c6874d525a971501467257bea02e5e6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b7de726f_fe794639",
        "filename": "unit_test/color_test.cc",
        "patchSetId": 4
      },
      "lineNbr": 494,
      "author": {
        "id": 1115898
      },
      "writtenOn": "2022-04-03T18:59:36Z",
      "side": 1,
      "message": "These constants dont match the precision of the 8 bit references.  Seems like 8 bit and 10 bit should produce identical results if you took the 10 bit, shifted it down by 2 and used the 8 bit?\n\nThe ones in the 8 bit float code use the same precision as row_common and can reasonably be expected to be \u0027exact\u0027 with float math, assuming the coefficients have been normalized to add up to 1.0\n\nAnother way to get values would be find an accepted implementation, such as a codec, and use the same reference values / precision they used",
      "range": {
        "startLine": 494,
        "startChar": 0,
        "endLine": 494,
        "endChar": 54
      },
      "revId": "99f2ea995c6874d525a971501467257bea02e5e6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4bbd5309_f7cd0ec4",
        "filename": "unit_test/color_test.cc",
        "patchSetId": 4
      },
      "lineNbr": 494,
      "author": {
        "id": 1482051
      },
      "writtenOn": "2022-04-04T07:28:17Z",
      "side": 1,
      "message": "There are small differences. 8bit values have range 0-255, and 10bit values have range 0-1023. So to convert from 10bit to 8bit, you should multiply 255/1023 (0.24926686217008798), but not shift down by 2 (multiply by 0.25 equivalently).\n\nThese values are derived from values and formulas from \"H.273 : Coding-independent code points for video signal type identification\" (https://www.itu.int/rec/T-REC-H.273-202107-I/en).\nNamely, formulas used are 23-25, 29-31, 38-40, and values used are Kr and Kb from Table 4.\n\nIs listing Kr and Kb and computing these coefficients from them acceptable?",
      "parentUuid": "b7de726f_fe794639",
      "range": {
        "startLine": 494,
        "startChar": 0,
        "endLine": 494,
        "endChar": 54
      },
      "revId": "99f2ea995c6874d525a971501467257bea02e5e6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9030842c_970b0038",
        "filename": "unit_test/color_test.cc",
        "patchSetId": 4
      },
      "lineNbr": 494,
      "author": {
        "id": 1482051
      },
      "writtenOn": "2022-04-05T15:06:55Z",
      "side": 1,
      "message": "Updated to calculate these coefficients from kr, kb, and bit depth.\nH.273 is used by multiple codecs such as H.264, H.265 and AV1, and also in Chrome: https://source.chromium.org/chromium/chromium/src/+/main:ui/gfx/color_space.cc;l\u003d1101",
      "parentUuid": "4bbd5309_f7cd0ec4",
      "range": {
        "startLine": 494,
        "startChar": 0,
        "endLine": 494,
        "endChar": 54
      },
      "revId": "99f2ea995c6874d525a971501467257bea02e5e6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "29cbafdf_d951cdd6",
        "filename": "unit_test/color_test.cc",
        "patchSetId": 4
      },
      "lineNbr": 504,
      "author": {
        "id": 1115898
      },
      "writtenOn": "2022-04-03T18:59:36Z",
      "side": 1,
      "message": "is there any value to 10 bit yuv to 8 bit rgb reference functions?  can\u0027t 10 bit to 10 bit test be used?\n\nall these constants and code are hard to maintain.  They are similar to the standard 8 bit coefficients, but divided by 4 to convert 10 bit to 8 bit, but extra precision has been added, which is likely not going to affect the 8 bit output.\nIf you still want all these perhaps base them on the 8 bit code using the same constants but with / 4.0.\n\nThe 10 to 10 bit can use the same coefficients, so its just these 10 to 8 conversions that have different values.",
      "revId": "99f2ea995c6874d525a971501467257bea02e5e6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "69c2ba45_940d0b6d",
        "filename": "unit_test/color_test.cc",
        "patchSetId": 4
      },
      "lineNbr": 504,
      "author": {
        "id": 1482051
      },
      "writtenOn": "2022-04-04T07:28:17Z",
      "side": 1,
      "message": "As explained, it\u0027s not simply / 4.0 so we can\u0027t share them this way.",
      "parentUuid": "29cbafdf_d951cdd6",
      "revId": "99f2ea995c6874d525a971501467257bea02e5e6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9a8378ce_90c6b298",
        "filename": "unit_test/color_test.cc",
        "patchSetId": 4
      },
      "lineNbr": 562,
      "author": {
        "id": 1115898
      },
      "writtenOn": "2022-04-03T18:59:36Z",
      "side": 1,
      "message": "should use the same constants as 8 to 8?",
      "revId": "99f2ea995c6874d525a971501467257bea02e5e6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ca2a69a3_f3663d43",
        "filename": "unit_test/color_test.cc",
        "patchSetId": 4
      },
      "lineNbr": 562,
      "author": {
        "id": 1482051
      },
      "writtenOn": "2022-04-04T07:28:17Z",
      "side": 1,
      "message": "1.164 and 1.164384 are actually both rounded values of 255/219 (1.1643835616438356), which scale limited range to full range.\n\nFor 10bit, this value should be 1023/876 (1.167808219178082) hence the value here.",
      "parentUuid": "9a8378ce_90c6b298",
      "revId": "99f2ea995c6874d525a971501467257bea02e5e6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e54cb8fc_8f62f433",
        "filename": "unit_test/color_test.cc",
        "patchSetId": 4
      },
      "lineNbr": 747,
      "author": {
        "id": 1115898
      },
      "writtenOn": "2022-04-03T18:59:36Z",
      "side": 1,
      "message": "keep %8d for 8 bit if you can.  Its already quite wide.",
      "revId": "99f2ea995c6874d525a971501467257bea02e5e6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "80d55dac_b5b8e76e",
        "filename": "unit_test/color_test.cc",
        "patchSetId": 4
      },
      "lineNbr": 747,
      "author": {
        "id": 1482051
      },
      "writtenOn": "2022-04-04T07:28:17Z",
      "side": 1,
      "message": "For 10bit test we have 2^30 \u003d 1073741824 values, so it may need 10 digits. Or we can compute needed width from the values.",
      "parentUuid": "e54cb8fc_8f62f433",
      "revId": "99f2ea995c6874d525a971501467257bea02e5e6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "928987e2_cb6be27a",
        "filename": "unit_test/color_test.cc",
        "patchSetId": 4
      },
      "lineNbr": 747,
      "author": {
        "id": 1482051
      },
      "writtenOn": "2022-04-05T15:06:55Z",
      "side": 1,
      "message": "Updated to calculate a suitable width based on input range.",
      "parentUuid": "80d55dac_b5b8e76e",
      "revId": "99f2ea995c6874d525a971501467257bea02e5e6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "cbf826d9_231b4c94",
        "filename": "unit_test/color_test.cc",
        "patchSetId": 4
      },
      "lineNbr": 1008,
      "author": {
        "id": 1115898
      },
      "writtenOn": "2022-04-03T18:59:36Z",
      "side": 1,
      "message": "prefer C++ be kept minimal so this can be compiled with C89 if needed.",
      "revId": "99f2ea995c6874d525a971501467257bea02e5e6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a7c390e3_1f806fcd",
        "filename": "unit_test/color_test.cc",
        "patchSetId": 4
      },
      "lineNbr": 1008,
      "author": {
        "id": 1482051
      },
      "writtenOn": "2022-04-04T07:28:17Z",
      "side": 1,
      "message": "Unittests already use googletest which is C++, so maybe it\u0027s fine?",
      "parentUuid": "cbf826d9_231b4c94",
      "revId": "99f2ea995c6874d525a971501467257bea02e5e6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "4a12b842_716b6298",
        "filename": "unit_test/color_test.cc",
        "patchSetId": 4
      },
      "lineNbr": 1008,
      "author": {
        "id": 1482051
      },
      "writtenOn": "2022-04-05T15:06:55Z",
      "side": 1,
      "message": "I removed most C++ usage I spotted.",
      "parentUuid": "a7c390e3_1f806fcd",
      "revId": "99f2ea995c6874d525a971501467257bea02e5e6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e522014d_4c9caa44",
        "filename": "unit_test/color_test.cc",
        "patchSetId": 4
      },
      "lineNbr": 1019,
      "author": {
        "id": 1115898
      },
      "writtenOn": "2022-04-03T18:59:36Z",
      "side": 1,
      "message": "consider using OMP to make this faster using multicore",
      "revId": "99f2ea995c6874d525a971501467257bea02e5e6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6fa267c3_d61b840c",
        "filename": "unit_test/color_test.cc",
        "patchSetId": 4
      },
      "lineNbr": 1019,
      "author": {
        "id": 1482051
      },
      "writtenOn": "2022-04-04T07:28:17Z",
      "side": 1,
      "message": "I can try it, but I\u0027m not capable of dealing with all these building tools.",
      "parentUuid": "e522014d_4c9caa44",
      "revId": "99f2ea995c6874d525a971501467257bea02e5e6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}